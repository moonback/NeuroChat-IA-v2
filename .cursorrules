# üß† NeuroChat-IA-v2 - R√®gles CursorAI
# Configuration personnalis√©e pour un assistant IA intelligent et s√©curis√©

## üéØ CONTEXTE DU PROJET
NeuroChat-IA-v2 est une application de chat IA avanc√©e avec :
- Support multi-providers (OpenAI, Gemini, Mistral) avec fallback automatique
- Chiffrement AES-256-GCM niveau gouvernemental (PBKDF2 600k it√©rations)
- RAG (Retrieval-Augmented Generation) local avec embeddings MiniLM
- Synth√®se vocale et reconnaissance vocale (Web Speech API)
- Interface responsive et accessible avec design moderne
- Gestion des espaces de travail et modes de s√©curit√©
- M√©moire utilisateur avec extraction automatique de faits
- Recherche web (Tavily + DuckDuckGo fallback)
- Modes de s√©curit√© : Normal, Priv√© (auto-destruction), Enfant (PIN)

## üèóÔ∏è ARCHITECTURE ET ORGANISATION

### Structure des dossiers
```
src/
‚îú‚îÄ‚îÄ components/          # Composants React r√©utilisables
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Composants UI de base (shadcn/ui + Radix UI)
‚îÇ   ‚îî‚îÄ‚îÄ [feature]/      # Composants sp√©cifiques aux fonctionnalit√©s
‚îú‚îÄ‚îÄ hooks/              # Hooks React personnalis√©s
‚îú‚îÄ‚îÄ services/           # Services m√©tier et API
‚îú‚îÄ‚îÄ lib/                # Utilitaires et helpers
‚îú‚îÄ‚îÄ types/              # Types TypeScript
‚îî‚îÄ‚îÄ styles/             # Styles globaux et CSS modules
```

### Conventions de nommage
- **Composants** : PascalCase (`ChatContainer.tsx`, `Header.tsx`)
- **Hooks** : camelCase avec pr√©fixe `use` (`useTheme.ts`, `useWorkspace.ts`)
- **Services** : camelCase (`openaiApi.ts`, `encryption.ts`)
- **Types/Interfaces** : PascalCase (`Message`, `RagContext`)
- **Constantes** : UPPER_SNAKE_CASE (`DEFAULT_TIMEOUT`, `MAX_RETRIES`)

## üîß CONVENTIONS TECHNIQUES

### TypeScript
- **Strict mode** : Toujours activ√© (`strict: true`)
- **Types explicites** : Pr√©f√©rer les types explicites aux `any`
- **Interfaces** : Utiliser pour les objets complexes
- **Generics** : Utiliser quand appropri√© pour la r√©utilisabilit√©
- **Union types** : Pour les valeurs multiples possibles
- **Target** : ES2020 avec moduleResolution "bundler"

```typescript
// ‚úÖ BON
interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  imageUrl?: string;
  memoryFactsCount?: number;
  sources?: Array<{ title: string; url: string }>;
}

// ‚ùå MAUVAIS
const message: any = { ... };
```

### React
- **Fonctional Components** : Toujours utiliser des composants fonctionnels
- **Hooks** : Respecter les r√®gles des hooks React
- **Props** : D√©finir des interfaces claires pour les props
- **State** : Utiliser `useState` pour l'√©tat local, `useReducer` pour l'√©tat complexe
- **Effects** : Sp√©cifier les d√©pendances dans `useEffect`
- **Lazy Loading** : Utiliser `lazy()` et `Suspense` pour les composants lourds
- **Virtualization** : Utiliser `react-virtuoso` pour les longues listes

```typescript
// ‚úÖ BON - Lazy loading des composants
const TTSSettingsModalLazy = lazy(() => import('@/components/TTSSettingsModal').then(m => ({ default: m.TTSSettingsModal })));

// ‚úÖ BON - Props typ√©es
interface ChatContainerProps {
  messages: Message[];
  isLoading: boolean;
  onEditMessage: (id: string, newText: string) => void;
  onDeleteMessage: (id: string) => void;
  onReplyToMessage: (id: string) => void;
  selectMode?: boolean;
  selectedMessageIds?: string[];
  onSelectMessage?: (id: string) => void;
  modePrive?: boolean;
  modeEnfant?: boolean;
}
```

### Tailwind CSS
- **Classes utilitaires** : Utiliser les classes Tailwind natives
- **Responsive** : Toujours penser mobile-first
- **Dark mode** : Supporter `dark:` pour tous les composants
- **Custom classes** : Cr√©er des classes personnalis√©es pour la r√©utilisabilit√©
- **Animations** : Utiliser `tailwindcss-animate` et classes personnalis√©es
- **Gradients** : Utiliser les gradients pour les modes de s√©curit√©

```typescript
// ‚úÖ BON - Design moderne avec gradients et animations
<div className={cn(
  "flex-1 relative transition-all duration-700 group",
  modePrive 
    ? "bg-gradient-to-br from-red-50/40 via-purple-50/50 to-blue-50/40 dark:from-red-950/30 dark:via-purple-950/40 dark:to-blue-950/30" 
    : modeEnfant
    ? "bg-gradient-to-br from-pink-50/50 via-yellow-50/60 to-orange-50/50 dark:from-pink-950/30 dark:via-yellow-950/40 dark:to-orange-950/30"
    : "bg-gradient-to-br from-slate-50/70 via-white/90 to-blue-50/50 dark:from-slate-900/70 dark:via-slate-900/90 dark:to-slate-800/50",
  "backdrop-blur-2xl"
)}>
```

### UI Components (shadcn/ui + Radix UI)
- **Radix UI** : Utiliser pour l'accessibilit√© et le comportement
- **shadcn/ui** : Composants de base stylis√©s avec Tailwind
- **Composants personnalis√©s** : √âtendre les composants de base selon les besoins
- **Accessibilit√©** : Respecter les standards ARIA et WCAG

## üé® STYLE ET QUALIT√â DU CODE

### Formatage
- **Indentation** : 2 espaces
- **Longueur de ligne** : Max 100 caract√®res
- **Semicolons** : Toujours utiliser
- **Guillemets** : Pr√©f√©rer les guillemets simples pour les cha√Ænes
- **Virgules trailing** : Utiliser pour les objets et arrays multilignes

### Commentaires
- **JSDoc** : Pour les fonctions et composants publics
- **Commentaires explicatifs** : Pour la logique complexe
- **TODO/FIXME** : Marquer les am√©liorations futures
- **S√©curit√©** : Documenter les aspects de s√©curit√© critiques

```typescript
/**
 * üîê Service de Chiffrement AES-256 - Niveau Gouvernemental
 * 
 * Impl√©mentation de s√©curit√© militaire pour NeuroChat
 * - Chiffrement AES-256-GCM (Galois/Counter Mode) 
 * - D√©rivation de cl√© PBKDF2 avec 600,000 it√©rations
 * - Salt cryptographiquement s√©curis√© de 256 bits
 * - Vecteur d'initialisation (IV) unique par op√©ration
 * - Authentification int√©gr√©e (AEAD)
 * - Gestion s√©curis√©e des cl√©s en m√©moire
 */
```

### Gestion des erreurs
- **Try-catch** : Toujours g√©rer les erreurs async
- **Error boundaries** : Impl√©menter pour les composants React
- **Logging** : Logger les erreurs de mani√®re appropri√©e
- **Fallbacks** : Fournir des alternatives en cas d'√©chec
- **Toast notifications** : Utiliser `sonner` pour les retours utilisateur

```typescript
// ‚úÖ BON - Gestion d'erreurs avec fallback
try {
  const result = await apiCall();
  return result;
} catch (error) {
  console.error('Erreur API:', error);
  toast.error('Impossible de r√©cup√©rer les donn√©es');
  // Fallback ou re-throw selon le contexte
  throw new Error('Impossible de r√©cup√©rer les donn√©es');
}
```

## üöÄ R√àGLES SP√âCIFIQUES AU PROJET

### S√©curit√© et Chiffrement
- **AES-256-GCM** : Toujours utiliser pour le chiffrement des donn√©es sensibles
- **PBKDF2** : 600,000 it√©rations pour la d√©rivation de cl√©
- **Cl√©s** : Ne jamais exposer les cl√©s dans le code
- **Validation** : Valider toutes les entr√©es utilisateur
- **Sanitisation** : Nettoyer les donn√©es avant affichage
- **Modes de s√©curit√©** : Normal, Priv√© (auto-destruction), Enfant (PIN)

### Performance
- **Lazy loading** : Pour les composants lourds (modales, param√®tres)
- **Memoization** : Utiliser `useMemo` et `useCallback` judicieusement
- **Virtualization** : Pour les longues listes (react-virtuoso)
- **Bundle splitting** : Diviser le code en chunks avec Vite
- **Code splitting** : Importer dynamiquement les composants non critiques

### Accessibilit√©
- **ARIA labels** : Toujours fournir des labels accessibles
- **Navigation clavier** : Supporter la navigation au clavier
- **Contraste** : Respecter les ratios de contraste WCAG
- **Screen readers** : Tester avec des lecteurs d'√©cran
- **Radix UI** : Utiliser les composants accessibles par d√©faut

### Fonctionnalit√©s Sp√©ciales
- **RAG local** : Embeddings MiniLM avec similarit√© cosinus
- **M√©moire utilisateur** : Extraction automatique de faits + fallback LLM
- **Recherche web** : Tavily + DuckDuckGo fallback
- **Synth√®se vocale** : Configuration avanc√©e (vitesse, tonalit√©, volume)
- **Reconnaissance vocale** : Web Speech API avec support fr-FR
- **Modes de s√©curit√©** : Gestion des espaces de travail chiffr√©s

## ü§ñ R√àGLES CURSORAI

### G√©n√©ration de code
- **Composants modulaires** : Cr√©er des composants r√©utilisables et testables
- **Props typ√©es** : Toujours d√©finir des interfaces claires
- **Hooks personnalis√©s** : Extraire la logique dans des hooks r√©utilisables
- **Gestion d'√©tat** : Utiliser des patterns React modernes
- **Lazy loading** : Impl√©menter pour les composants lourds
- **Virtualization** : Utiliser react-virtuoso pour les listes longues

### Refactoring
- **Extraction** : Diviser les gros composants en plus petits
- **R√©utilisabilit√©** : Cr√©er des composants g√©n√©riques
- **Performance** : Optimiser les re-renders et la m√©moire
- **Tests** : Rendre le code testable
- **Code splitting** : S√©parer les fonctionnalit√©s non critiques

### Documentation
- **README** : Maintenir √† jour avec les nouvelles fonctionnalit√©s
- **JSDoc** : Documenter les APIs publiques
- **Exemples** : Fournir des exemples d'utilisation
- **Changelog** : Documenter les changements
- **S√©curit√©** : Documenter les aspects de s√©curit√©

## üìù CONVENTIONS GIT

### Messages de commit
```
type(scope): description courte

Description d√©taill√©e si n√©cessaire

- Changement 1
- Changement 2

Fixes #123
```

**Types** : `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
**Scope** : `ui`, `api`, `security`, `performance`, `mobile`, `voice`, `rag`, `memory`

### Branches
- **main** : Code de production
- **develop** : D√©veloppement principal
- **feature/*** : Nouvelles fonctionnalit√©s
- **fix/*** : Corrections de bugs
- **hotfix/*** : Corrections urgentes

## üîç V√âRIFICATIONS QUALIT√â

### Avant commit
- [ ] Code compile sans erreurs TypeScript
- [ ] Tests passent (si impl√©ment√©s)
- [ ] Linting OK (ESLint + Prettier)
- [ ] Types TypeScript valides
- [ ] Responsive design v√©rifi√©
- [ ] Accessibilit√© test√©e
- [ ] S√©curit√© v√©rifi√©e (chiffrement)

### Code review
- [ ] Logique claire et compr√©hensible
- [ ] Performance acceptable
- [ ] S√©curit√© respect√©e
- [ ] Tests couvrent les cas d'usage
- [ ] Documentation √† jour
- [ ] Lazy loading impl√©ment√© si n√©cessaire

## üéØ PROMPTS RECOMMAND√âS

### Pour la cr√©ation de composants
```
Cr√©e un composant React TypeScript pour [fonctionnalit√©] avec :
- Interface claire et accessible (Radix UI + shadcn/ui)
- Support du mode sombre et des gradients de s√©curit√©
- Responsive design mobile-first avec Tailwind
- Gestion d'erreurs appropri√©e avec toast notifications
- Lazy loading si le composant est lourd
- Tests unitaires de base
```

### Pour le refactoring
```
Refactorise ce composant en suivant les bonnes pratiques :
- Divise en composants plus petits et r√©utilisables
- Extrais la logique dans des hooks personnalis√©s
- Am√©liore la performance avec memoization
- Ajoute la gestion d'erreurs avec try-catch
- Impl√©mente le lazy loading si n√©cessaire
- Rends le code plus testable
```

### Pour l'optimisation
```
Optimise ce code pour :
- R√©duire les re-renders avec useMemo/useCallback
- Am√©liorer la performance avec react-virtuoso
- R√©duire la taille du bundle avec code splitting
- Am√©liorer l'accessibilit√© avec ARIA labels
- Respecter les conventions du projet
- Impl√©menter le lazy loading des composants lourds
```

### Pour la s√©curit√©
```
Impl√©mente la s√©curit√© pour [fonctionnalit√©] :
- Chiffrement AES-256-GCM avec PBKDF2 600k it√©rations
- Validation stricte des inputs utilisateur
- Gestion s√©curis√©e des cl√©s en m√©moire
- Modes de s√©curit√© (Normal, Priv√©, Enfant)
- Protection contre les attaques XSS
- Logging s√©curis√© des √©v√©nements critiques
```

## üìö RESSOURCES UTILES

- **React Docs** : https://react.dev/
- **TypeScript Handbook** : https://www.typescriptlang.org/docs/
- **Tailwind CSS** : https://tailwindcss.com/docs
- **shadcn/ui** : https://ui.shadcn.com/
- **Radix UI** : https://www.radix-ui.com/
- **ESLint Rules** : https://eslint.org/docs/rules/
- **Accessibility Guidelines** : https://www.w3.org/WAI/WCAG21/quickref/
- **Crypto Web API** : https://developer.mozilla.org/en-US/docs/Web/API/Web_Crypto_API
- **Web Speech API** : https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API

---

*Ce fichier .cursorrules est vivant et doit √™tre mis √† jour selon l'√©volution du projet et les nouvelles bonnes pratiques.*
