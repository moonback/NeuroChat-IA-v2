# üß† NeuroChat-IA-v2 - R√®gles CursorAI
# Configuration personnalis√©e pour un assistant IA intelligent et s√©curis√©

## üéØ CONTEXTE DU PROJET
NeuroChat-IA-v2 est une application de chat IA avanc√©e avec :
- Support multi-providers (OpenAI, Gemini, Mistral)
- Chiffrement AES-256 et modes de s√©curit√©
- RAG (Retrieval-Augmented Generation) 
- Synth√®se vocale et reconnaissance vocale
- Interface responsive et accessible
- Gestion des espaces de travail

## üèóÔ∏è ARCHITECTURE ET ORGANISATION

### Structure des dossiers
```
src/
‚îú‚îÄ‚îÄ components/          # Composants React r√©utilisables
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Composants UI de base (shadcn/ui)
‚îÇ   ‚îî‚îÄ‚îÄ [feature]/      # Composants sp√©cifiques aux fonctionnalit√©s
‚îú‚îÄ‚îÄ hooks/              # Hooks React personnalis√©s
‚îú‚îÄ‚îÄ services/           # Services m√©tier et API
‚îú‚îÄ‚îÄ lib/                # Utilitaires et helpers
‚îú‚îÄ‚îÄ store/              # √âtat global (Zustand/Context)
‚îú‚îÄ‚îÄ types/              # Types TypeScript
‚îî‚îÄ‚îÄ styles/             # Styles globaux et CSS modules
```

### Conventions de nommage
- **Composants** : PascalCase (`ChatContainer.tsx`, `Header.tsx`)
- **Hooks** : camelCase avec pr√©fixe `use` (`useTheme.ts`, `useWorkspace.ts`)
- **Services** : camelCase (`openaiApi.ts`, `encryption.ts`)
- **Types/Interfaces** : PascalCase (`Message`, `RagContext`)
- **Constantes** : UPPER_SNAKE_CASE (`DEFAULT_TIMEOUT`, `MAX_RETRIES`)

## üîß CONVENTIONS TECHNIQUES

### TypeScript
- **Strict mode** : Toujours activ√©
- **Types explicites** : Pr√©f√©rer les types explicites aux `any`
- **Interfaces** : Utiliser pour les objets complexes
- **Generics** : Utiliser quand appropri√© pour la r√©utilisabilit√©
- **Union types** : Pour les valeurs multiples possibles

```typescript
// ‚úÖ BON
interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

// ‚ùå MAUVAIS
const message: any = { ... };
```

### React
- **Fonctional Components** : Toujours utiliser des composants fonctionnels
- **Hooks** : Respecter les r√®gles des hooks React
- **Props** : D√©finir des interfaces claires pour les props
- **State** : Utiliser `useState` pour l'√©tat local, `useReducer` pour l'√©tat complexe
- **Effects** : Sp√©cifier les d√©pendances dans `useEffect`

```typescript
// ‚úÖ BON
interface HeaderProps {
  muted: boolean;
  onMute: () => void;
  onUnmute: () => void;
  // ... autres props
}

export function Header({ muted, onMute, onUnmute, ...props }: HeaderProps) {
  const [isOpen, setIsOpen] = useState(false);
  
  useEffect(() => {
    // Logique avec d√©pendances claires
  }, [muted]);
  
  return <header>...</header>;
}
```

### Tailwind CSS
- **Classes utilitaires** : Utiliser les classes Tailwind natives
- **Responsive** : Toujours penser mobile-first
- **Dark mode** : Supporter `dark:` pour tous les composants
- **Custom classes** : Cr√©er des classes personnalis√©es pour la r√©utilisabilit√©

```typescript
// ‚úÖ BON
<div className="w-full bg-white/80 dark:bg-slate-950/80 backdrop-blur-xl border border-slate-200/50 dark:border-slate-800/50">
  <button className="px-4 py-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 rounded-lg transition-colors">
    Action
  </button>
</div>

// ‚ùå MAUVAIS
<div className="bg-white" style={{ width: '100%', backdropFilter: 'blur(10px)' }}>
```

## üé® STYLE ET QUALIT√â DU CODE

### Formatage
- **Indentation** : 2 espaces
- **Longueur de ligne** : Max 100 caract√®res
- **Semicolons** : Toujours utiliser
- **Guillemets** : Pr√©f√©rer les guillemets simples pour les cha√Ænes
- **Virgules trailing** : Utiliser pour les objets et arrays multilignes

### Commentaires
- **JSDoc** : Pour les fonctions et composants publics
- **Commentaires explicatifs** : Pour la logique complexe
- **TODO/FIXME** : Marquer les am√©liorations futures

```typescript
/**
 * G√®re le chiffrement des messages avec AES-256
 * @param message - Message √† chiffrer
 * @param key - Cl√© de chiffrement
 * @returns Message chiffr√© en base64
 */
export function encryptMessage(message: string, key: string): string {
  // Logique de chiffrement complexe
  // TODO: Ajouter support pour d'autres algorithmes
}
```

### Gestion des erreurs
- **Try-catch** : Toujours g√©rer les erreurs async
- **Error boundaries** : Impl√©menter pour les composants React
- **Logging** : Logger les erreurs de mani√®re appropri√©e
- **Fallbacks** : Fournir des alternatives en cas d'√©chec

```typescript
// ‚úÖ BON
try {
  const result = await apiCall();
  return result;
} catch (error) {
  console.error('Erreur API:', error);
  // Fallback ou re-throw selon le contexte
  throw new Error('Impossible de r√©cup√©rer les donn√©es');
}
```

## üöÄ R√àGLES SP√âCIFIQUES AU PROJET

### S√©curit√© et Chiffrement
- **AES-256** : Toujours utiliser pour le chiffrement des donn√©es sensibles
- **Cl√©s** : Ne jamais exposer les cl√©s dans le code
- **Validation** : Valider toutes les entr√©es utilisateur
- **Sanitisation** : Nettoyer les donn√©es avant affichage

### Performance
- **Lazy loading** : Pour les composants lourds
- **Memoization** : Utiliser `useMemo` et `useCallback` judicieusement
- **Virtualization** : Pour les longues listes (Virtuoso)
- **Bundle splitting** : Diviser le code en chunks

### Accessibilit√©
- **ARIA labels** : Toujours fournir des labels accessibles
- **Navigation clavier** : Supporter la navigation au clavier
- **Contraste** : Respecter les ratios de contraste WCAG
- **Screen readers** : Tester avec des lecteurs d'√©cran

## ü§ñ R√àGLES CURSORAI

### G√©n√©ration de code
- **Composants modulaires** : Cr√©er des composants r√©utilisables et testables
- **Props typ√©es** : Toujours d√©finir des interfaces claires
- **Hooks personnalis√©s** : Extraire la logique dans des hooks r√©utilisables
- **Gestion d'√©tat** : Utiliser des patterns React modernes

### Refactoring
- **Extraction** : Diviser les gros composants en plus petits
- **R√©utilisabilit√©** : Cr√©er des composants g√©n√©riques
- **Performance** : Optimiser les re-renders et la m√©moire
- **Tests** : Rendre le code testable

### Documentation
- **README** : Maintenir √† jour
- **JSDoc** : Documenter les APIs publiques
- **Exemples** : Fournir des exemples d'utilisation
- **Changelog** : Documenter les changements

## üìù CONVENTIONS GIT

### Messages de commit
```
type(scope): description courte

Description d√©taill√©e si n√©cessaire

- Changement 1
- Changement 2

Fixes #123
```

**Types** : `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`
**Scope** : `ui`, `api`, `security`, `performance`, `mobile`

### Branches
- **main** : Code de production
- **develop** : D√©veloppement principal
- **feature/*** : Nouvelles fonctionnalit√©s
- **fix/*** : Corrections de bugs
- **hotfix/*** : Corrections urgentes

## üîç V√âRIFICATIONS QUALIT√â

### Avant commit
- [ ] Code compile sans erreurs
- [ ] Tests passent
- [ ] Linting OK (ESLint + Prettier)
- [ ] Types TypeScript valides
- [ ] Responsive design v√©rifi√©
- [ ] Accessibilit√© test√©e

### Code review
- [ ] Logique claire et compr√©hensible
- [ ] Performance acceptable
- [ ] S√©curit√© respect√©e
- [ ] Tests couvrent les cas d'usage
- [ ] Documentation √† jour

## üéØ PROMPTS RECOMMAND√âS

### Pour la cr√©ation de composants
```
Cr√©e un composant React TypeScript pour [fonctionnalit√©] avec :
- Interface claire et accessible
- Support du mode sombre
- Responsive design mobile-first
- Gestion d'erreurs appropri√©e
- Tests unitaires de base
```

### Pour le refactoring
```
Refactorise ce composant en suivant les bonnes pratiques :
- Divise en composants plus petits
- Extrais la logique dans des hooks
- Am√©liore la performance
- Ajoute la gestion d'erreurs
- Rends le code plus testable
```

### Pour l'optimisation
```
Optimise ce code pour :
- R√©duire les re-renders
- Am√©liorer la performance
- R√©duire la taille du bundle
- Am√©liorer l'accessibilit√©
- Respecter les conventions du projet
```

---

## üìö RESSOURCES UTILES

- **React Docs** : https://react.dev/
- **TypeScript Handbook** : https://www.typescriptlang.org/docs/
- **Tailwind CSS** : https://tailwindcss.com/docs
- **shadcn/ui** : https://ui.shadcn.com/
- **ESLint Rules** : https://eslint.org/docs/rules/
- **Accessibility Guidelines** : https://www.w3.org/WAI/WCAG21/quickref/

---

*Ce fichier .cursorrules est vivant et doit √™tre mis √† jour selon l'√©volution du projet et les nouvelles bonnes pratiques.*
