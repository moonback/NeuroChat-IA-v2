import type { ConversationTemplate, TemplateCategory, TemplateUsage } from '@/types/templates';

// Templates pr√©d√©finis optimis√©s pour NeuroChat
export const PREDEFINED_TEMPLATES: ConversationTemplate[] = [
  // PRODUCTIVIT√â
  {
    id: 'email_writer',
    name: 'R√©daction d\'email professionnel',
    description: 'R√©digez des emails professionnels efficaces et bien structur√©s',
    category: 'productivity',
    icon: 'üìß',
    color: 'from-blue-500 to-blue-600',
    prompt: `Aide-moi √† r√©diger un email professionnel avec les d√©tails suivants :

**Destinataire** : {{recipient}}
**Objet** : {{subject}}
**Contexte** : {{context}}
**Ton souhait√©** : {{tone}}

Merci de cr√©er un email bien structur√©, professionnel et adapt√© au contexte.`,
    placeholders: [
      {
        id: 'recipient',
        label: 'Destinataire',
        type: 'text',
        placeholder: 'Ex: Mon manager, l\'√©quipe projet...',
        required: true
      },
      {
        id: 'subject',
        label: 'Objet de l\'email',
        type: 'text',
        placeholder: 'Ex: Demande de cong√©s, Point projet...',
        required: true
      },
      {
        id: 'context',
        label: 'Contexte et message principal',
        type: 'textarea',
        placeholder: 'D√©crivez la situation et ce que vous voulez communiquer...',
        required: true
      },
      {
        id: 'tone',
        label: 'Ton',
        type: 'select',
        options: ['Formel', 'Cordial', 'Direct', 'Amical'],
        defaultValue: 'Cordial'
      }
    ],
    settings: {
      ragEnabled: false,
      webEnabled: false,
      agentEnabled: true,
      provider: 'gemini'
    },
    tags: ['email', 'professionnel', 'communication', 'r√©daction']
  },

  {
    id: 'meeting_prep',
    name: 'Pr√©paration de r√©union',
    description: 'Structurez votre r√©union avec un ordre du jour efficace',
    category: 'productivity',
    icon: 'üìã',
    color: 'from-green-500 to-green-600',
    prompt: `Aide-moi √† pr√©parer une r√©union productive :

**Sujet** : {{topic}}
**Participants** : {{participants}}
**Dur√©e** : {{duration}}
**Objectifs** : {{objectives}}

Cr√©e un ordre du jour structur√© avec timing, points √† aborder, et questions cl√©s.`,
    placeholders: [
      {
        id: 'topic',
        label: 'Sujet de la r√©union',
        type: 'text',
        required: true,
        placeholder: 'Ex: Lancement projet X, Point hebdomadaire...'
      },
      {
        id: 'participants',
        label: 'Participants',
        type: 'text',
        placeholder: 'R√¥les et nombre de participants'
      },
      {
        id: 'duration',
        label: 'Dur√©e',
        type: 'select',
        options: ['30 min', '45 min', '1h', '1h30', '2h'],
        defaultValue: '1h'
      },
      {
        id: 'objectives',
        label: 'Objectifs principaux',
        type: 'textarea',
        required: true,
        placeholder: 'Que voulez-vous accomplir dans cette r√©union ?'
      }
    ],
    settings: {
      ragEnabled: false,
      webEnabled: false,
      agentEnabled: true
    },
    tags: ['r√©union', 'productivit√©', 'organisation', 'agenda']
  },

  // APPRENTISSAGE
  {
    id: 'explain_concept',
    name: 'Explication de concept',
    description: 'Demandez une explication claire et p√©dagogique d\'un concept',
    category: 'learning',
    icon: 'üéì',
    color: 'from-purple-500 to-purple-600',
    prompt: `Explique-moi le concept suivant de mani√®re claire et p√©dagogique :

**Concept** : {{concept}}
**Mon niveau** : {{level}}
**Contexte d'usage** : {{context}}

Utilise des exemples concrets, des analogies si n√©cessaire, et structure l'explication du simple au complexe.`,
    placeholders: [
      {
        id: 'concept',
        label: 'Concept √† expliquer',
        type: 'text',
        required: true,
        placeholder: 'Ex: Machine Learning, Blockchain, Photosynth√®se...'
      },
      {
        id: 'level',
        label: 'Mon niveau',
        type: 'select',
        options: ['D√©butant', 'Interm√©diaire', 'Avanc√©'],
        defaultValue: 'Interm√©diaire'
      },
      {
        id: 'context',
        label: 'Contexte d\'usage',
        type: 'text',
        placeholder: 'Ex: Pour mon travail, mes √©tudes, curiosit√© personnelle...'
      }
    ],
    settings: {
      ragEnabled: true,
      webEnabled: true,
      agentEnabled: true
    },
    tags: ['apprentissage', 'explication', 'p√©dagogie', 'formation']
  },

  // CR√âATIF
  {
    id: 'brainstorming',
    name: 'Session de brainstorming',
    description: 'G√©n√©rez des id√©es cr√©atives pour votre projet',
    category: 'creative',
    icon: 'üí°',
    color: 'from-yellow-500 to-orange-500',
    prompt: `Aidons ensemble √† g√©n√©rer des id√©es cr√©atives !

**Projet/Probl√®me** : {{project}}
**Objectif** : {{goal}}
**Contraintes** : {{constraints}}
**Public cible** : {{audience}}

Propose 10 id√©es vari√©es et cr√©atives, puis d√©veloppons ensemble les plus prometteuses.`,
    placeholders: [
      {
        id: 'project',
        label: 'Projet ou probl√®me',
        type: 'text',
        required: true,
        placeholder: 'Ex: Nom pour ma startup, id√©e d\'article, concept d\'app...'
      },
      {
        id: 'goal',
        label: 'Objectif principal',
        type: 'text',
        required: true,
        placeholder: 'Que voulez-vous accomplir ?'
      },
      {
        id: 'constraints',
        label: 'Contraintes',
        type: 'text',
        placeholder: 'Budget, temps, style, audience...'
      },
      {
        id: 'audience',
        label: 'Public cible',
        type: 'text',
        placeholder: '√Ä qui s\'adresse votre projet ?'
      }
    ],
    settings: {
      ragEnabled: false,
      webEnabled: true,
      agentEnabled: true
    },
    tags: ['cr√©ativit√©', 'brainstorming', 'id√©es', 'innovation']
  },

  // TECHNIQUE
  {
    id: 'code_review',
    name: 'Revue de code',
    description: 'Obtenez un feedback sur votre code avec suggestions d\'am√©lioration',
    category: 'technical',
    icon: 'üíª',
    color: 'from-indigo-500 to-purple-500',
    prompt: `Analyse ce code et donne-moi tes suggestions d'am√©lioration :

**Langage** : {{language}}
**Contexte** : {{context}}
**Objectifs** : {{objectives}}

\`\`\`{{language}}
{{code}}
\`\`\`

Concentre-toi sur : lisibilit√©, performance, bonnes pratiques, et s√©curit√©.`,
    placeholders: [
      {
        id: 'language',
        label: 'Langage de programmation',
        type: 'select',
        options: ['JavaScript', 'TypeScript', 'Python', 'Java', 'C#', 'Go', 'Rust', 'PHP', 'Autre'],
        required: true
      },
      {
        id: 'context',
        label: 'Contexte du code',
        type: 'text',
        placeholder: 'Ex: API REST, composant React, script d\'automatisation...'
      },
      {
        id: 'objectives',
        label: 'Objectifs d\'am√©lioration',
        type: 'text',
        placeholder: 'Performance, maintenabilit√©, s√©curit√©...'
      },
      {
        id: 'code',
        label: 'Code √† analyser',
        type: 'textarea',
        required: true,
        placeholder: 'Collez votre code ici...',
        validation: {
          minLength: 10
        }
      }
    ],
    settings: {
      ragEnabled: true,
      webEnabled: true,
      agentEnabled: true,
      provider: 'gemini'
    },
    tags: ['programmation', 'code', 'r√©vision', 'am√©lioration']
  },

  // ANALYSE
  {
    id: 'document_analysis',
    name: 'Analyse de document',
    description: 'Analysez un document et obtenez un r√©sum√© structur√©',
    category: 'analysis',
    icon: 'üìÑ',
    color: 'from-teal-500 to-cyan-500',
    prompt: `Analyse ce document et fournis-moi :

**Type d'analyse** : {{analysis_type}}
**Focus principal** : {{focus}}

1. **R√©sum√© ex√©cutif** (3-4 phrases cl√©s)
2. **Points principaux** (liste structur√©e)
3. **Insights et recommandations**
4. **Questions pour approfondir**

Note : Le document sera ajout√© via l'import de fichier.`,
    placeholders: [
      {
        id: 'analysis_type',
        label: 'Type d\'analyse',
        type: 'select',
        options: ['R√©sum√© g√©n√©ral', 'Analyse critique', 'Points d\'action', 'Recherche d\'insights', 'Comparaison'],
        defaultValue: 'R√©sum√© g√©n√©ral'
      },
      {
        id: 'focus',
        label: 'Focus principal',
        type: 'text',
        placeholder: 'Ex: Aspects financiers, strat√©gie, risques, opportunit√©s...'
      }
    ],
    settings: {
      ragEnabled: true,
      webEnabled: false,
      agentEnabled: true
    },
    tags: ['analyse', 'document', 'r√©sum√©', 'insights']
  },

  // PERSONNEL
  {
    id: 'decision_helper',
    name: 'Aide √† la d√©cision',
    description: 'Structurez votre r√©flexion pour prendre une d√©cision √©clair√©e',
    category: 'personal',
    icon: 'ü§î',
    color: 'from-rose-500 to-pink-500',
    prompt: `Aide-moi √† prendre une d√©cision r√©fl√©chie :

**D√©cision √† prendre** : {{decision}}
**Contexte** : {{context}}
**Enjeux** : {{stakes}}
**D√©lai** : {{deadline}}

Analysons ensemble les pour/contre, les risques, les alternatives, et structurons une approche m√©thodique.`,
    placeholders: [
      {
        id: 'decision',
        label: 'D√©cision √† prendre',
        type: 'text',
        required: true,
        placeholder: 'Ex: Changer de travail, investir, d√©m√©nager...'
      },
      {
        id: 'context',
        label: 'Contexte',
        type: 'textarea',
        required: true,
        placeholder: 'D√©crivez votre situation actuelle...'
      },
      {
        id: 'stakes',
        label: 'Enjeux principaux',
        type: 'text',
        placeholder: 'Ce qui est important pour vous dans cette d√©cision'
      },
      {
        id: 'deadline',
        label: 'D√©lai de d√©cision',
        type: 'select',
        options: ['Urgent (< 1 semaine)', 'Court terme (1 mois)', 'Moyen terme (3 mois)', 'Long terme (> 6 mois)'],
        defaultValue: 'Moyen terme (3 mois)'
      }
    ],
    settings: {
      ragEnabled: false,
      webEnabled: false,
      agentEnabled: true
    },
    tags: ['d√©cision', 'r√©flexion', 'analyse', 'personnel']
  },

  // MVP & STARTUP
  {
    id: 'mvp_web_creator',
    name: 'Cr√©ateur de MVP Web',
    description: 'Planifiez et structurez votre Minimum Viable Product pour le web',
    category: 'technical',
    icon: 'üöÄ',
    color: 'from-emerald-500 to-teal-500',
    prompt: `Aide-moi √† cr√©er un plan complet pour d√©velopper un MVP (Minimum Viable Product) web :

**üéØ CONCEPT DU PROJET**
**Nom du projet** : {{project_name}}
**Probl√®me r√©solu** : {{problem}}
**Public cible** : {{target_audience}}
**Proposition de valeur** : {{value_proposition}}

**‚öôÔ∏è SP√âCIFICATIONS TECHNIQUES**
**Type d'application** : {{app_type}}
**Budget estim√©** : {{budget}}
**D√©lai souhait√©** : {{timeline}}
**Niveau technique √©quipe** : {{tech_level}}

**üìã FONCTIONNALIT√âS PRIORITAIRES**
{{core_features}}

**üîß CONTRAINTES & CONTEXTE**
{{constraints}}

---

**MISSION** : Cr√©e-moi un plan d√©taill√© pour ce MVP incluant :

1. **üèóÔ∏è ARCHITECTURE TECHNIQUE RECOMMAND√âE**
   - Stack technologique optimale (frontend/backend/base de donn√©es)
   - Justification des choix techniques selon le contexte
   - Services et outils recommand√©s (h√©bergement, analytics, etc.)

2. **üìù BACKLOG PRIORIS√â (USER STORIES)**
   - Fonctionnalit√©s CORE (indispensables au MVP)
   - Fonctionnalit√©s NICE-TO-HAVE (phase 2)
   - Estimation de complexit√© pour chaque fonctionnalit√©

3. **üìÖ PLANNING DE D√âVELOPPEMENT**
   - D√©coupage en sprints/phases logiques
   - Milestones cl√©s et livrables
   - Chemin critique du projet

4. **üí∞ ESTIMATION BUDG√âTAIRE D√âTAILL√âE**
   - Co√ªts de d√©veloppement
   - Co√ªts d'infrastructure et services
   - Co√ªts de maintenance mensuelle

5. **‚ö†Ô∏è RISQUES & MITIGATION**
   - Risques techniques identifi√©s
   - Risques business/march√©
   - Strat√©gies de r√©duction des risques

6. **üìä M√âTRIQUES DE SUCC√àS**
   - KPIs √† suivre d√®s le lancement
   - Objectifs quantifi√©s pour valider le MVP
   - Outils de mesure recommand√©s

7. **üöÄ STRAT√âGIE DE LANCEMENT**
   - Plan de d√©ploiement technique
   - Strat√©gie de tests utilisateur
   - Plan de feedback et it√©ration

Sois concret, actionnable et adapte tes recommandations au budget et d√©lai indiqu√©s.`,
    placeholders: [
      {
        id: 'project_name',
        label: 'Nom du projet',
        type: 'text',
        required: true,
        placeholder: 'Ex: TaskMaster, FoodieConnect, LearnFast...'
      },
      {
        id: 'problem',
        label: 'Quel probl√®me votre MVP r√©sout-il ?',
        type: 'textarea',
        required: true,
        placeholder: 'D√©crivez clairement le probl√®me que vous voulez r√©soudre...',
        validation: {
          minLength: 20
        }
      },
      {
        id: 'target_audience',
        label: 'Public cible principal',
        type: 'text',
        required: true,
        placeholder: 'Ex: Entrepreneurs 25-40 ans, √âtudiants en design, PME tech...'
      },
      {
        id: 'value_proposition',
        label: 'Proposition de valeur unique',
        type: 'textarea',
        required: true,
        placeholder: 'En quoi votre solution est-elle diff√©rente et meilleure ?'
      },
      {
        id: 'app_type',
        label: 'Type d\'application web',
        type: 'select',
        required: true,
        options: [
          'Application web (SPA)',
          'Site vitrine avec fonctionnalit√©s',
          'Plateforme e-commerce',
          'Marketplace/place de march√©',
          'SaaS B2B',
          'R√©seau social/communaut√©',
          'Application de gestion',
          'Outil de productivit√©',
          'Autre'
        ]
      },
      {
        id: 'budget',
        label: 'Budget de d√©veloppement',
        type: 'select',
        required: true,
        options: [
          'Tr√®s serr√© (< 5K‚Ç¨)',
          'Limit√© (5K-15K‚Ç¨)',
          'Mod√©r√© (15K-50K‚Ç¨)',
          'Confortable (50K-100K‚Ç¨)',
          'Important (> 100K‚Ç¨)'
        ]
      },
      {
        id: 'timeline',
        label: 'D√©lai souhait√© pour le MVP',
        type: 'select',
        required: true,
        options: [
          'Ultra-rapide (< 1 mois)',
          'Rapide (1-3 mois)',
          'Standard (3-6 mois)',
          '√âtoff√© (6-12 mois)',
          'Pas de contrainte temps'
        ]
      },
      {
        id: 'tech_level',
        label: 'Niveau technique de l\'√©quipe',
        type: 'select',
        required: true,
        options: [
          'D√©butant (apprentissage)',
          'Interm√©diaire (quelques projets)',
          'Avanc√© (exp√©rience solide)',
          'Expert (architecte/lead)',
          '√âquipe mixte'
        ]
      },
      {
        id: 'core_features',
        label: 'Fonctionnalit√©s principales souhait√©es',
        type: 'textarea',
        required: true,
        placeholder: 'Listez les 3-7 fonctionnalit√©s core de votre MVP (une par ligne ou s√©par√©es par des virgules)...',
        validation: {
          minLength: 30
        }
      },
      {
        id: 'constraints',
        label: 'Contraintes et contexte particulier',
        type: 'textarea',
        placeholder: 'Ex: Int√©gration avec syst√®mes existants, r√©glementations sp√©cifiques, contraintes de s√©curit√©, √©quipe distribu√©e...'
      }
    ],
    settings: {
      ragEnabled: true,
      webEnabled: true,
      agentEnabled: true,
      provider: 'gemini'
    },
    tags: ['mvp', 'startup', 'd√©veloppement web', 'planification', 'architecture', 'business']
  }
];

export const TEMPLATE_CATEGORIES: TemplateCategory[] = [
  {
    id: 'productivity',
    name: 'Productivit√©',
    description: 'Templates pour am√©liorer votre efficacit√© professionnelle',
    icon: '‚ö°',
    color: 'from-blue-500 to-blue-600',
    templates: ['email_writer', 'meeting_prep']
  },
  {
    id: 'learning',
    name: 'Apprentissage',
    description: 'Templates pour apprendre et comprendre de nouveaux concepts',
    icon: 'üéì',
    color: 'from-purple-500 to-purple-600',
    templates: ['explain_concept']
  },
  {
    id: 'creative',
    name: 'Cr√©ativit√©',
    description: 'Templates pour stimuler votre cr√©ativit√© et g√©n√©rer des id√©es',
    icon: 'üé®',
    color: 'from-yellow-500 to-orange-500',
    templates: ['brainstorming']
  },
  {
    id: 'technical',
    name: 'Technique',
    description: 'Templates pour les d√©veloppeurs et professionnels techniques',
    icon: '‚öôÔ∏è',
    color: 'from-indigo-500 to-purple-500',
    templates: ['code_review', 'mvp_web_creator']
  },
  {
    id: 'analysis',
    name: 'Analyse',
    description: 'Templates pour analyser des documents et donn√©es',
    icon: 'üìä',
    color: 'from-teal-500 to-cyan-500',
    templates: ['document_analysis']
  },
  {
    id: 'personal',
    name: 'Personnel',
    description: 'Templates pour vos besoins personnels et d√©cisions de vie',
    icon: 'üåü',
    color: 'from-rose-500 to-pink-500',
    templates: ['decision_helper']
  },
  {
    id: 'custom',
    name: 'Personnalis√©s',
    description: 'Vos templates cr√©√©s sur mesure',
    icon: 'üîß',
    color: 'from-gray-500 to-gray-600',
    templates: []
  }
];

class TemplateService {
  private readonly USAGE_KEY = 'neurochat_template_usage';
  private readonly CUSTOM_KEY = 'neurochat_custom_templates';

  constructor(private workspaceId: string = 'default') {}

  private getStorageKey(suffix: string): string {
    return `ws:${this.workspaceId}:${suffix}`;
  }

  // R√©cup√©rer tous les templates (pr√©d√©finis + personnalis√©s)
  getAllTemplates(): ConversationTemplate[] {
    const customTemplates = this.getCustomTemplates();
    return [...PREDEFINED_TEMPLATES, ...customTemplates];
  }

  // R√©cup√©rer les templates personnalis√©s
  getCustomTemplates(): ConversationTemplate[] {
    try {
      const stored = localStorage.getItem(this.getStorageKey(this.CUSTOM_KEY));
      return stored ? JSON.parse(stored) : [];
    } catch {
      return [];
    }
  }

  // R√©cup√©rer les templates par cat√©gorie
  getTemplatesByCategory(categoryId: string): ConversationTemplate[] {
    const allTemplates = this.getAllTemplates();
    return allTemplates.filter(t => t.category === categoryId);
  }

  // R√©cup√©rer un template par ID
  getTemplateById(id: string): ConversationTemplate | undefined {
    return this.getAllTemplates().find(t => t.id === id);
  }

  // Sauvegarder un template personnalis√©
  saveCustomTemplate(template: Omit<ConversationTemplate, 'id' | 'isCustom' | 'createdAt'>): ConversationTemplate {
    const newTemplate: ConversationTemplate = {
      ...template,
      id: `custom_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      isCustom: true,
      createdAt: new Date(),
      usage: 0
    };

    const customTemplates = this.getCustomTemplates();
    customTemplates.push(newTemplate);
    
    try {
      localStorage.setItem(this.getStorageKey(this.CUSTOM_KEY), JSON.stringify(customTemplates));
    } catch (error) {
      console.error('Erreur lors de la sauvegarde du template:', error);
    }

    return newTemplate;
  }

  // Supprimer un template personnalis√©
  deleteCustomTemplate(id: string): boolean {
    const customTemplates = this.getCustomTemplates();
    const filteredTemplates = customTemplates.filter(t => t.id !== id);
    
    if (filteredTemplates.length === customTemplates.length) {
      return false; // Template non trouv√©
    }

    try {
      localStorage.setItem(this.getStorageKey(this.CUSTOM_KEY), JSON.stringify(filteredTemplates));
      return true;
    } catch {
      return false;
    }
  }

  // Enregistrer l'utilisation d'un template
  recordUsage(templateId: string, placeholderValues?: Record<string, string>): void {
    const usage: TemplateUsage = {
      templateId,
      timestamp: new Date(),
      placeholderValues
    };

    try {
      const stored = localStorage.getItem(this.getStorageKey(this.USAGE_KEY));
      const usageHistory: TemplateUsage[] = stored ? JSON.parse(stored) : [];
      usageHistory.push(usage);

      // Garder seulement les 1000 derni√®res utilisations
      if (usageHistory.length > 1000) {
        usageHistory.splice(0, usageHistory.length - 1000);
      }

      localStorage.setItem(this.getStorageKey(this.USAGE_KEY), JSON.stringify(usageHistory));

      // Mettre √† jour le compteur d'usage du template
      this.updateTemplateUsageCount(templateId);
    } catch (error) {
      console.error('Erreur lors de l\'enregistrement de l\'usage:', error);
    }
  }

  // Mettre √† jour le compteur d'usage d'un template
  private updateTemplateUsageCount(templateId: string): void {
    const template = this.getTemplateById(templateId);
    if (template && template.isCustom) {
      const customTemplates = this.getCustomTemplates();
      const templateIndex = customTemplates.findIndex(t => t.id === templateId);
      
      if (templateIndex !== -1) {
        customTemplates[templateIndex].usage = (customTemplates[templateIndex].usage || 0) + 1;
        customTemplates[templateIndex].lastUsed = new Date();
        
        try {
          localStorage.setItem(this.getStorageKey(this.CUSTOM_KEY), JSON.stringify(customTemplates));
        } catch {}
      }
    }
  }

  // R√©cup√©rer les templates les plus utilis√©s
  getMostUsedTemplates(limit: number = 5): ConversationTemplate[] {
    try {
      const stored = localStorage.getItem(this.getStorageKey(this.USAGE_KEY));
      const usageHistory: TemplateUsage[] = stored ? JSON.parse(stored) : [];
      
      const usageCount = new Map<string, number>();
      usageHistory.forEach(usage => {
        usageCount.set(usage.templateId, (usageCount.get(usage.templateId) || 0) + 1);
      });

      const allTemplates = this.getAllTemplates();
      return allTemplates
        .map(template => ({
          ...template,
          usage: usageCount.get(template.id) || 0
        }))
        .sort((a, b) => (b.usage || 0) - (a.usage || 0))
        .slice(0, limit);
    } catch {
      return [];
    }
  }

  // R√©cup√©rer les templates r√©cemment utilis√©s
  getRecentTemplates(limit: number = 5): ConversationTemplate[] {
    try {
      const stored = localStorage.getItem(this.getStorageKey(this.USAGE_KEY));
      const usageHistory: TemplateUsage[] = stored ? JSON.parse(stored) : [];
      
      const recentUsage = new Map<string, Date>();
      usageHistory.forEach(usage => {
        const currentDate = recentUsage.get(usage.templateId);
        const usageDate = new Date(usage.timestamp);
        if (!currentDate || usageDate > currentDate) {
          recentUsage.set(usage.templateId, usageDate);
        }
      });

      const allTemplates = this.getAllTemplates();
      return allTemplates
        .filter(template => recentUsage.has(template.id))
        .map(template => ({
          ...template,
          lastUsed: recentUsage.get(template.id)
        }))
        .sort((a, b) => (b.lastUsed?.getTime() || 0) - (a.lastUsed?.getTime() || 0))
        .slice(0, limit);
    } catch {
      return [];
    }
  }

  // Rechercher des templates
  searchTemplates(query: string): ConversationTemplate[] {
    const allTemplates = this.getAllTemplates();
    const searchTerms = query.toLowerCase().split(' ').filter(Boolean);
    
    return allTemplates.filter(template => {
      const searchableText = [
        template.name,
        template.description,
        template.category,
        ...template.tags
      ].join(' ').toLowerCase();

      return searchTerms.every(term => searchableText.includes(term));
    });
  }

  // Remplir un template avec des valeurs
  fillTemplate(template: ConversationTemplate, values: Record<string, string>): string {
    let filledPrompt = template.prompt;
    
    // Remplacer les placeholders
    Object.entries(values).forEach(([key, value]) => {
      const placeholder = `{{${key}}}`;
      filledPrompt = filledPrompt.replace(new RegExp(placeholder, 'g'), value);
    });

    // Nettoyer les placeholders non remplis
    filledPrompt = filledPrompt.replace(/\{\{[^}]+\}\}/g, '[Non sp√©cifi√©]');

    return filledPrompt;
  }

  // Exporter tous les templates personnalis√©s
  exportCustomTemplates(): string {
    const customTemplates = this.getCustomTemplates();
    return JSON.stringify(customTemplates, null, 2);
  }

  // Importer des templates personnalis√©s
  importCustomTemplates(jsonData: string): { success: boolean; imported: number; errors: string[] } {
    try {
      const importedTemplates = JSON.parse(jsonData);
      const errors: string[] = [];
      let imported = 0;

      if (!Array.isArray(importedTemplates)) {
        return { success: false, imported: 0, errors: ['Le fichier doit contenir un tableau de templates'] };
      }

      const currentTemplates = this.getCustomTemplates();
      
      importedTemplates.forEach((template, index) => {
        try {
          // Validation basique
          if (!template.name || !template.prompt || !template.category) {
            errors.push(`Template ${index + 1}: Champs obligatoires manquants`);
            return;
          }

          // G√©n√©rer un nouvel ID pour √©viter les conflits
          const newTemplate: ConversationTemplate = {
            ...template,
            id: `imported_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
            isCustom: true,
            createdAt: new Date(),
            usage: 0
          };

          currentTemplates.push(newTemplate);
          imported++;
        } catch (error) {
          errors.push(`Template ${index + 1}: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
        }
      });

      if (imported > 0) {
        localStorage.setItem(this.getStorageKey(this.CUSTOM_KEY), JSON.stringify(currentTemplates));
      }

      return { success: imported > 0, imported, errors };
    } catch (error) {
      return { 
        success: false, 
        imported: 0, 
        errors: [`Erreur de parsing JSON: ${error instanceof Error ? error.message : 'Erreur inconnue'}`] 
      };
    }
  }
}

export default TemplateService;
