/**
 * üîß Service de G√©n√©ration de Prompts Syst√®me bolt.new
 * 
 * Service intelligent pour cr√©er des prompts syst√®me optimis√©s pour bolt.new
 * - Templates pr√©d√©finis pour diff√©rents types de projets
 * - G√©n√©ration dynamique bas√©e sur les sp√©cifications utilisateur
 * - Optimisation pour le d√©veloppement rapide et efficace
 */

import type { 
  BoltPromptTemplate, 
  BoltPromptConfig, 
  GeneratedBoltPrompt, 
  BoltPromptCategory,
  BoltPromptPreset,
  BoltPromptVariable 
} from '@/types/boltPrompt';
import { sendMessageToGemini } from './geminiApi';

// Templates pr√©d√©finis pour diff√©rents types de projets
const DEFAULT_TEMPLATES: BoltPromptTemplate[] = [
  {
    id: 'web-app-modern',
    name: 'Application Web Moderne',
    description: 'Template pour une application web moderne avec React/Next.js',
    category: 'web-app',
    template: `Tu es un d√©veloppeur expert sp√©cialis√© dans la cr√©ation d'applications web modernes avec bolt.new.

PROJET: {{projectName}}
TYPE: Application Web Moderne
STACK TECHNIQUE: {{techStack}}
COMPLEXIT√â: {{complexity}}

OBJECTIFS DU PROJET:
{{goals}}

FONCTIONNALIT√âS PRINCIPALES:
{{features}}

PUBLIC CIBLE: {{targetAudience}}

CONTRAINTES ET EXIGENCES:
{{constraints}}

INSTRUCTIONS DE D√âVELOPPEMENT:

1. ARCHITECTURE ET STRUCTURE:
- Utilise une architecture modulaire et scalable
- Impl√©mente les meilleures pratiques React/Next.js
- Structure le code de mani√®re claire et maintenable
- Utilise TypeScript pour la s√©curit√© des types

2. DESIGN ET UX:
- Cr√©e une interface moderne et responsive
- Utilise Tailwind CSS pour le styling
- Impl√©mente un design system coh√©rent
- Optimise l'exp√©rience utilisateur mobile-first

3. FONCTIONNALIT√âS TECHNIQUES:
- Impl√©mente l'authentification s√©curis√©e
- Ajoute la gestion d'√©tat appropri√©e (Zustand/Context)
- Int√®gre les APIs n√©cessaires
- Optimise les performances et le SEO

4. QUALIT√â ET TESTS:
- √âcris du code propre et document√©
- Ajoute des tests unitaires pour les fonctions critiques
- Impl√©mente la gestion d'erreurs robuste
- Optimise le bundle et les performances

5. D√âPLOIEMENT:
- Configure le d√©ploiement automatique
- Optimise pour la production
- Ajoute le monitoring et les analytics

CONTEXTE ADDITIONNEL:
{{additionalContext}}

Commence par cr√©er la structure de base du projet et impl√©mente les fonctionnalit√©s une par une, en suivant les meilleures pratiques de d√©veloppement moderne.`,
    variables: [
      {
        name: 'projectName',
        type: 'text',
        label: 'Nom du projet',
        description: 'Le nom de votre application web',
        required: true,
        placeholder: 'MonApp'
      },
      {
        name: 'techStack',
        type: 'multiselect',
        label: 'Stack technique',
        description: 'Technologies √† utiliser',
        required: true,
        options: [
          { value: 'React', label: 'React' },
          { value: 'Next.js', label: 'Next.js' },
          { value: 'TypeScript', label: 'TypeScript' },
          { value: 'Tailwind CSS', label: 'Tailwind CSS' },
          { value: 'Zustand', label: 'Zustand' },
          { value: 'React Query', label: 'React Query' },
          { value: 'Supabase', label: 'Supabase' },
          { value: 'Prisma', label: 'Prisma' },
          { value: 'PostgreSQL', label: 'PostgreSQL' }
        ],
        defaultValue: ['React', 'TypeScript', 'Tailwind CSS']
      },
      {
        name: 'complexity',
        type: 'select',
        label: 'Complexit√©',
        description: 'Niveau de complexit√© du projet',
        required: true,
        options: [
          { value: 'simple', label: 'Simple' },
          { value: 'intermediate', label: 'Interm√©diaire' },
          { value: 'advanced', label: 'Avanc√©' },
          { value: 'expert', label: 'Expert' }
        ],
        defaultValue: 'intermediate'
      },
      {
        name: 'goals',
        type: 'text',
        label: 'Objectifs',
        description: 'Objectifs principaux du projet',
        required: true,
        placeholder: 'Cr√©er une plateforme de gestion de t√¢ches intuitive'
      },
      {
        name: 'features',
        type: 'text',
        label: 'Fonctionnalit√©s',
        description: 'Fonctionnalit√©s principales √† impl√©menter',
        required: true,
        placeholder: 'Authentification, CRUD t√¢ches, notifications, dashboard'
      },
      {
        name: 'targetAudience',
        type: 'text',
        label: 'Public cible',
        description: 'Qui va utiliser cette application',
        required: true,
        placeholder: '√âquipes de d√©veloppement, freelancers'
      },
      {
        name: 'constraints',
        type: 'text',
        label: 'Contraintes',
        description: 'Contraintes techniques ou business',
        required: false,
        placeholder: 'Budget limit√©, d√©lai serr√©, accessibilit√© requise'
      },
      {
        name: 'additionalContext',
        type: 'text',
        label: 'Contexte additionnel',
        description: 'Informations suppl√©mentaires',
        required: false,
        placeholder: 'Inspiration, r√©f√©rences, exigences sp√©ciales'
      }
    ],
    tags: ['web', 'react', 'modern', 'fullstack'],
    createdAt: new Date(),
    updatedAt: new Date(),
    isDefault: true
  },
  {
    id: 'mobile-app-react-native',
    name: 'Application Mobile React Native',
    description: 'Template pour une application mobile avec React Native',
    category: 'mobile-app',
    template: `Tu es un d√©veloppeur expert sp√©cialis√© dans la cr√©ation d'applications mobiles avec React Native et Expo.

PROJET: {{projectName}}
TYPE: Application Mobile
PLATEFORME: {{platform}}
STACK TECHNIQUE: {{techStack}}
COMPLEXIT√â: {{complexity}}

OBJECTIFS DU PROJET:
{{goals}}

FONCTIONNALIT√âS PRINCIPALES:
{{features}}

PUBLIC CIBLE: {{targetAudience}}

CONTRAINTES ET EXIGENCES:
{{constraints}}

INSTRUCTIONS DE D√âVELOPPEMENT:

1. ARCHITECTURE MOBILE:
- Utilise Expo pour le d√©veloppement rapide
- Impl√©mente une navigation fluide (React Navigation)
- Structure le code avec des composants r√©utilisables
- Optimise pour les performances mobiles

2. DESIGN MOBILE:
- Suis les guidelines iOS/Android
- Cr√©e une interface intuitive et tactile
- Impl√©mente des animations fluides
- Optimise pour diff√©rentes tailles d'√©cran

3. FONCTIONNALIT√âS NATIVES:
- Int√®gre les APIs natives (cam√©ra, GPS, notifications)
- Impl√©mente l'authentification biom√©trique
- Ajoute le support offline
- Optimise la gestion de la batterie

4. QUALIT√â ET TESTS:
- Teste sur diff√©rents appareils
- Impl√©mente la gestion d'erreurs robuste
- Optimise les performances et la m√©moire
- Ajoute les tests automatis√©s

CONTEXTE ADDITIONNEL:
{{additionalContext}}

Commence par configurer l'environnement Expo et cr√©er la structure de base de l'application mobile.`,
    variables: [
      {
        name: 'projectName',
        type: 'text',
        label: 'Nom du projet',
        required: true,
        placeholder: 'MonAppMobile'
      },
      {
        name: 'platform',
        type: 'multiselect',
        label: 'Plateforme',
        required: true,
        options: [
          { value: 'iOS', label: 'iOS' },
          { value: 'Android', label: 'Android' },
          { value: 'Web', label: 'Web' }
        ],
        defaultValue: ['iOS', 'Android']
      },
      {
        name: 'techStack',
        type: 'multiselect',
        label: 'Stack technique',
        required: true,
        options: [
          { value: 'React Native', label: 'React Native' },
          { value: 'Expo', label: 'Expo' },
          { value: 'TypeScript', label: 'TypeScript' },
          { value: 'React Navigation', label: 'React Navigation' },
          { value: 'NativeWind', label: 'NativeWind' },
          { value: 'Zustand', label: 'Zustand' },
          { value: 'React Query', label: 'React Query' }
        ],
        defaultValue: ['React Native', 'Expo', 'TypeScript']
      },
      {
        name: 'complexity',
        type: 'select',
        label: 'Complexit√©',
        required: true,
        options: [
          { value: 'simple', label: 'Simple' },
          { value: 'intermediate', label: 'Interm√©diaire' },
          { value: 'advanced', label: 'Avanc√©' },
          { value: 'expert', label: 'Expert' }
        ],
        defaultValue: 'intermediate'
      },
      {
        name: 'goals',
        type: 'text',
        label: 'Objectifs',
        required: true,
        placeholder: 'Cr√©er une app de fitness avec suivi d\'activit√©s'
      },
      {
        name: 'features',
        type: 'text',
        label: 'Fonctionnalit√©s',
        required: true,
        placeholder: 'Authentification, GPS tracking, notifications push, dashboard'
      },
      {
        name: 'targetAudience',
        type: 'text',
        label: 'Public cible',
        required: true,
        placeholder: 'Sportifs, coureurs, utilisateurs fitness'
      },
      {
        name: 'constraints',
        type: 'text',
        label: 'Contraintes',
        required: false,
        placeholder: 'App Store guidelines, performance batterie, offline support'
      },
      {
        name: 'additionalContext',
        type: 'text',
        label: 'Contexte additionnel',
        required: false,
        placeholder: 'Inspiration, r√©f√©rences design, int√©grations sp√©ciales'
      }
    ],
    tags: ['mobile', 'react-native', 'expo', 'cross-platform'],
    createdAt: new Date(),
    updatedAt: new Date(),
    isDefault: true
  },
  {
    id: 'ai-ml-project',
    name: 'Projet IA/ML',
    description: 'Template pour un projet d\'intelligence artificielle ou machine learning',
    category: 'ai-ml',
    template: `Tu es un expert en intelligence artificielle et machine learning sp√©cialis√© dans le d√©veloppement d'applications IA avec bolt.new.

PROJET: {{projectName}}
TYPE: Application IA/ML
DOMAINE: {{domain}}
STACK TECHNIQUE: {{techStack}}
COMPLEXIT√â: {{complexity}}

OBJECTIFS DU PROJET:
{{goals}}

FONCTIONNALIT√âS IA:
{{features}}

DONN√âES ET MOD√àLES:
{{dataAndModels}}

PUBLIC CIBLE: {{targetAudience}}

CONTRAINTES TECHNIQUES:
{{constraints}}

INSTRUCTIONS DE D√âVELOPPEMENT:

1. ARCHITECTURE IA:
- Con√ßois une architecture modulaire pour les composants IA
- Impl√©mente la gestion des mod√®les et des donn√©es
- Cr√©e des APIs robustes pour les pr√©dictions
- Optimise les performances de calcul

2. INT√âGRATION IA:
- Int√®gre les mod√®les de machine learning appropri√©s
- Impl√©mente le preprocessing des donn√©es
- Ajoute la validation et l'√©valuation des mod√®les
- Cr√©e des interfaces pour la visualisation des r√©sultats

3. EXP√âRIENCE UTILISATEUR:
- Con√ßois des interfaces intuitives pour l'IA
- Impl√©mente le feedback utilisateur
- Ajoute la visualisation des donn√©es et pr√©dictions
- Optimise l'interaction homme-machine

4. QUALIT√â ET MONITORING:
- Impl√©mente le monitoring des performances IA
- Ajoute la validation des pr√©dictions
- Cr√©e des tests pour les mod√®les
- Optimise la pr√©cision et la vitesse

CONTEXTE ADDITIONNEL:
{{additionalContext}}

Commence par d√©finir l'architecture IA et impl√©mente les composants de base pour le machine learning.`,
    variables: [
      {
        name: 'projectName',
        type: 'text',
        label: 'Nom du projet',
        required: true,
        placeholder: 'MonProjetIA'
      },
      {
        name: 'domain',
        type: 'select',
        label: 'Domaine IA',
        required: true,
        options: [
          { value: 'computer-vision', label: 'Computer Vision' },
          { value: 'nlp', label: 'Natural Language Processing' },
          { value: 'recommendation', label: 'Syst√®me de recommandation' },
          { value: 'prediction', label: 'Pr√©diction/Analytics' },
          { value: 'chatbot', label: 'Chatbot/Assistant IA' },
          { value: 'generative', label: 'IA G√©n√©rative' },
          { value: 'other', label: 'Autre' }
        ],
        defaultValue: 'nlp'
      },
      {
        name: 'techStack',
        type: 'multiselect',
        label: 'Stack technique',
        required: true,
        options: [
          { value: 'Python', label: 'Python' },
          { value: 'TensorFlow', label: 'TensorFlow' },
          { value: 'PyTorch', label: 'PyTorch' },
          { value: 'OpenAI API', label: 'OpenAI API' },
          { value: 'Hugging Face', label: 'Hugging Face' },
          { value: 'LangChain', label: 'LangChain' },
          { value: 'FastAPI', label: 'FastAPI' },
          { value: 'React', label: 'React' },
          { value: 'Streamlit', label: 'Streamlit' }
        ],
        defaultValue: ['Python', 'OpenAI API', 'React']
      },
      {
        name: 'complexity',
        type: 'select',
        label: 'Complexit√©',
        required: true,
        options: [
          { value: 'simple', label: 'Simple' },
          { value: 'intermediate', label: 'Interm√©diaire' },
          { value: 'advanced', label: 'Avanc√©' },
          { value: 'expert', label: 'Expert' }
        ],
        defaultValue: 'intermediate'
      },
      {
        name: 'goals',
        type: 'text',
        label: 'Objectifs',
        required: true,
        placeholder: 'Cr√©er un assistant IA pour l\'analyse de documents'
      },
      {
        name: 'features',
        type: 'text',
        label: 'Fonctionnalit√©s IA',
        required: true,
        placeholder: 'Analyse de texte, g√©n√©ration de r√©sum√©s, classification automatique'
      },
      {
        name: 'dataAndModels',
        type: 'text',
        label: 'Donn√©es et mod√®les',
        required: true,
        placeholder: 'GPT-4, embeddings, base de donn√©es de documents'
      },
      {
        name: 'targetAudience',
        type: 'text',
        label: 'Public cible',
        required: true,
        placeholder: 'Professionnels, chercheurs, entreprises'
      },
      {
        name: 'constraints',
        type: 'text',
        label: 'Contraintes',
        required: false,
        placeholder: 'Latence faible, pr√©cision √©lev√©e, co√ªt API limit√©'
      },
      {
        name: 'additionalContext',
        type: 'text',
        label: 'Contexte additionnel',
        required: false,
        placeholder: 'Cas d\'usage sp√©cifiques, int√©grations, exigences de s√©curit√©'
      }
    ],
    tags: ['ai', 'ml', 'python', 'openai', 'llm'],
    createdAt: new Date(),
    updatedAt: new Date(),
    isDefault: true
  }
];

// Presets pr√©d√©finis pour diff√©rents cas d'usage
const DEFAULT_PRESETS: BoltPromptPreset[] = [
  {
    id: 'startup-mvp',
    name: 'MVP Startup',
    description: 'Configuration optimis√©e pour un MVP de startup',
    category: 'web-app',
    config: {
      complexity: 'intermediate',
      timeline: '2-4 semaines',
      budget: 'limit√©',
      constraints: ['D√©lai serr√©', 'Budget limit√©', 'Validation rapide'],
      goals: ['Validation du march√©', 'Feedback utilisateurs', 'It√©ration rapide']
    },
    isDefault: true
  },
  {
    id: 'enterprise-app',
    name: 'Application Entreprise',
    description: 'Configuration pour une application d\'entreprise robuste',
    category: 'web-app',
    config: {
      complexity: 'advanced',
      timeline: '3-6 mois',
      budget: 'important',
      constraints: ['S√©curit√© √©lev√©e', 'Scalabilit√©', 'Conformit√©'],
      goals: ['Productivit√© √©quipe', 'Gestion centralis√©e', 'Int√©gration syst√®mes']
    },
    isDefault: true
  },
  {
    id: 'mobile-consumer',
    name: 'App Mobile Consommateur',
    description: 'Configuration pour une app mobile grand public',
    category: 'mobile-app',
    config: {
      complexity: 'intermediate',
      timeline: '2-3 mois',
      budget: 'mod√©r√©',
      constraints: ['App Store guidelines', 'Performance', 'UX optimale'],
      goals: ['Engagement utilisateur', 'Croissance', 'Mon√©tisation']
    },
    isDefault: true
  }
];

class BoltPromptService {
  private templates: BoltPromptTemplate[] = [];
  private presets: BoltPromptPreset[] = [];
  private generatedPrompts: GeneratedBoltPrompt[] = [];

  constructor() {
    this.loadDefaultData();
    this.loadFromStorage();
  }

  /**
   * Charge les donn√©es par d√©faut
   */
  private loadDefaultData(): void {
    this.templates = [...DEFAULT_TEMPLATES];
    this.presets = [...DEFAULT_PRESETS];
  }

  /**
   * Charge les donn√©es depuis le localStorage
   */
  private loadFromStorage(): void {
    try {
      const savedTemplates = localStorage.getItem('bolt_prompt_templates');
      if (savedTemplates) {
        const parsed = JSON.parse(savedTemplates);
        this.templates = [...DEFAULT_TEMPLATES, ...parsed];
      }

      const savedPresets = localStorage.getItem('bolt_prompt_presets');
      if (savedPresets) {
        const parsed = JSON.parse(savedPresets);
        this.presets = [...DEFAULT_PRESETS, ...parsed];
      }

      const savedGenerated = localStorage.getItem('bolt_prompt_generated');
      if (savedGenerated) {
        this.generatedPrompts = JSON.parse(savedGenerated);
      }
    } catch (error) {
      console.error('Erreur lors du chargement des donn√©es bolt prompt:', error);
    }
  }

  /**
   * Sauvegarde les donn√©es dans le localStorage
   */
  private saveToStorage(): void {
    try {
      const customTemplates = this.templates.filter(t => !t.isDefault);
      localStorage.setItem('bolt_prompt_templates', JSON.stringify(customTemplates));

      const customPresets = this.presets.filter(p => !p.isDefault);
      localStorage.setItem('bolt_prompt_presets', JSON.stringify(customPresets));

      localStorage.setItem('bolt_prompt_generated', JSON.stringify(this.generatedPrompts));
    } catch (error) {
      console.error('Erreur lors de la sauvegarde des donn√©es bolt prompt:', error);
    }
  }

  /**
   * G√©n√®re un prompt syst√®me bas√© sur un template et une configuration
   */
  generatePrompt(templateId: string, config: BoltPromptConfig): GeneratedBoltPrompt {
    const template = this.templates.find(t => t.id === templateId);
    if (!template) {
      throw new Error(`Template ${templateId} non trouv√©`);
    }

    let generatedPrompt = template.template;

    // Remplace les variables dans le template
    template.variables.forEach(variable => {
      const value = this.getVariableValue(variable.name, config);
      const placeholder = `{{${variable.name}}}`;
      generatedPrompt = generatedPrompt.replace(new RegExp(placeholder, 'g'), String(value));
    });

    const generated: GeneratedBoltPrompt = {
      id: `generated-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      templateId,
      config,
      generatedPrompt,
      createdAt: new Date()
    };

    this.generatedPrompts.unshift(generated);
    this.saveToStorage();

    return generated;
  }

  /**
   * R√©cup√®re la valeur d'une variable depuis la configuration
   */
  private getVariableValue(variableName: string, config: BoltPromptConfig): string {
    const configMap: Record<string, string | string[] | number | boolean> = {
      projectName: config.projectType || 'Mon Projet',
      techStack: Array.isArray(config.techStack) ? config.techStack.join(', ') : config.techStack || '',
      complexity: config.complexity || 'intermediate',
      goals: Array.isArray(config.goals) ? config.goals.join('\n- ') : config.goals || '',
      features: Array.isArray(config.features) ? config.features.join('\n- ') : config.features || '',
      targetAudience: config.targetAudience || '',
      constraints: Array.isArray(config.constraints) ? config.constraints.join('\n- ') : config.constraints || '',
      additionalContext: config.additionalContext || '',
      timeline: config.timeline || '',
      budget: config.budget || '',
      inspiration: config.inspiration || ''
    };

    return String(configMap[variableName] || '');
  }

  /**
   * R√©cup√®re tous les templates disponibles
   */
  getTemplates(): BoltPromptTemplate[] {
    return [...this.templates];
  }

  /**
   * R√©cup√®re les templates par cat√©gorie
   */
  getTemplatesByCategory(category: BoltPromptCategory): BoltPromptTemplate[] {
    return this.templates.filter(t => t.category === category);
  }

  /**
   * R√©cup√®re un template par ID
   */
  getTemplate(id: string): BoltPromptTemplate | undefined {
    return this.templates.find(t => t.id === id);
  }

  /**
   * Cr√©e un nouveau template personnalis√©
   */
  createTemplate(template: Omit<BoltPromptTemplate, 'id' | 'createdAt' | 'updatedAt'>): BoltPromptTemplate {
    const newTemplate: BoltPromptTemplate = {
      ...template,
      id: `custom-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
      createdAt: new Date(),
      updatedAt: new Date()
    };

    this.templates.push(newTemplate);
    this.saveToStorage();

    return newTemplate;
  }

  /**
   * Met √† jour un template existant
   */
  updateTemplate(id: string, updates: Partial<BoltPromptTemplate>): BoltPromptTemplate | null {
    const index = this.templates.findIndex(t => t.id === id);
    if (index === -1) return null;

    this.templates[index] = {
      ...this.templates[index],
      ...updates,
      updatedAt: new Date()
    };

    this.saveToStorage();
    return this.templates[index];
  }

  /**
   * Supprime un template personnalis√©
   */
  deleteTemplate(id: string): boolean {
    const template = this.templates.find(t => t.id === id);
    if (!template || template.isDefault) return false;

    this.templates = this.templates.filter(t => t.id !== id);
    this.saveToStorage();
    return true;
  }

  /**
   * R√©cup√®re tous les presets disponibles
   */
  getPresets(): BoltPromptPreset[] {
    return [...this.presets];
  }

  /**
   * R√©cup√®re les presets par cat√©gorie
   */
  getPresetsByCategory(category: BoltPromptCategory): BoltPromptPreset[] {
    return this.presets.filter(p => p.category === category);
  }

  /**
   * Cr√©e un nouveau preset personnalis√©
   */
  createPreset(preset: Omit<BoltPromptPreset, 'id'>): BoltPromptPreset {
    const newPreset: BoltPromptPreset = {
      ...preset,
      id: `preset-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`
    };

    this.presets.push(newPreset);
    this.saveToStorage();

    return newPreset;
  }

  /**
   * R√©cup√®re l'historique des prompts g√©n√©r√©s
   */
  getGeneratedPrompts(): GeneratedBoltPrompt[] {
    return [...this.generatedPrompts];
  }

  /**
   * R√©cup√®re un prompt g√©n√©r√© par ID
   */
  getGeneratedPrompt(id: string): GeneratedBoltPrompt | undefined {
    return this.generatedPrompts.find(p => p.id === id);
  }

  /**
   * Met √† jour le rating d'un prompt g√©n√©r√©
   */
  updateGeneratedPromptRating(id: string, rating: number, feedback?: string): boolean {
    const prompt = this.generatedPrompts.find(p => p.id === id);
    if (!prompt) return false;

    prompt.rating = rating;
    if (feedback) prompt.feedback = feedback;

    this.saveToStorage();
    return true;
  }

  /**
   * Supprime un prompt g√©n√©r√©
   */
  deleteGeneratedPrompt(id: string): boolean {
    const index = this.generatedPrompts.findIndex(p => p.id === id);
    if (index === -1) return false;

    this.generatedPrompts.splice(index, 1);
    this.saveToStorage();
    return true;
  }

  /**
   * R√©cup√®re les statistiques d'utilisation
   */
  getStats() {
    const categories = this.templates.reduce((acc, template) => {
      acc[template.category] = (acc[template.category] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);

    const mostUsedCategory = Object.entries(categories)
      .sort(([,a], [,b]) => b - a)[0]?.[0] as BoltPromptCategory || 'other';

    const averageRating = this.generatedPrompts
      .filter(p => p.rating)
      .reduce((sum, p) => sum + (p.rating || 0), 0) / 
      this.generatedPrompts.filter(p => p.rating).length || 0;

    return {
      totalTemplates: this.templates.length,
      totalGenerated: this.generatedPrompts.length,
      mostUsedCategory,
      averageRating,
      recentActivity: this.generatedPrompts
        .slice(0, 10)
        .map(p => ({
          date: p.createdAt,
          action: 'generated' as const,
          templateId: p.templateId
        }))
    };
  }

  /**
   * ü§ñ Auto-remplissage des param√®tres via Gemini
   * Analyse une description de projet et remplit automatiquement les param√®tres
   */
  async autoFillConfigFromDescription(
    description: string, 
    templateId: string
  ): Promise<Partial<BoltPromptConfig>> {
    const template = this.getTemplate(templateId);
    if (!template) {
      throw new Error('Template introuvable');
    }

    const systemPrompt = `Tu es un expert en analyse de projets de d√©veloppement avec une expertise approfondie en technologies web, mobile, et desktop.

MISSION: Analyse la description de projet et remplis AUTOMATIQUEMENT TOUS les champs possibles avec des valeurs intelligentes et r√©alistes.

TEMPLATE: "${template.name}"
CAT√âGORIE: ${template.category}

CHAMPS √Ä REMPLIR (remplis TOUS les champs, m√™me avec des valeurs par d√©faut intelligentes):

${template.variables.map((v: BoltPromptVariable) => {
  const options = v.options ? `\n    Options disponibles: ${v.options.map(o => `${o.value} (${o.label})`).join(', ')}` : '';
  const defaultValue = v.defaultValue ? `\n    Valeur par d√©faut: ${v.defaultValue}` : '';
  return `- ${v.name} (${v.type}): ${v.description || v.label}${options}${defaultValue}`;
}).join('\n')}

R√àGLES CRITIQUES:
1. R√âPONDS UNIQUEMENT EN JSON VALIDE - COMMENCE DIRECTEMENT PAR { ET FINIS PAR }
2. PAS DE TEXTE AVANT NI APR√àS LE JSON
3. PAS DE MARKDOWN (backticks json ou backticks)
4. REMPLIS TOUS LES CHAMPS - m√™me si l'info n'est pas explicite, d√©duis intelligemment
5. Pour projectType: d√©duis le type de projet (ex: "Application Web", "API REST", "Jeu Mobile")
6. Pour techStack: liste les technologies mentionn√©es + technologies compl√©mentaires logiques
7. Pour features: extrais les fonctionnalit√©s mentionn√©es + fonctionnalit√©s essentielles manquantes
8. Pour targetAudience: d√©duis le public cible (ex: "D√©veloppeurs", "Entreprises", "Grand public")
9. Pour complexity: √©value la complexit√© (simple/intermediate/advanced/expert)
10. Pour timeline: estime une dur√©e r√©aliste (ex: "2-4 semaines", "1-2 mois")
11. Pour budget: estime un budget r√©aliste (ex: "Gratuit", "500-2000‚Ç¨", "5000-10000‚Ç¨")
12. Pour constraints: liste les contraintes techniques/business mentionn√©es
13. Pour goals: extrais les objectifs business/techniques
14. Pour inspiration: sugg√®re des r√©f√©rences similaires
15. Pour additionalContext: ajoute des d√©tails techniques pertinents

EXEMPLE DE R√âPONSE JSON:
{
  "projectType": "Application Web Moderne",
  "techStack": ["React", "TypeScript", "Tailwind CSS", "Node.js"],
  "features": ["Authentification", "Dashboard", "API REST", "Base de donn√©es"],
  "targetAudience": "D√©veloppeurs et entreprises",
  "complexity": "intermediate",
  "timeline": "3-4 semaines",
  "budget": "2000-5000‚Ç¨",
  "constraints": ["Responsive design", "Performance optimis√©e"],
  "goals": ["Automatiser les processus", "Am√©liorer la productivit√©"],
  "inspiration": "Applications similaires sur le march√©",
  "additionalContext": "Focus sur l'UX moderne et la scalabilit√©"
}`;

    try {
      const response = await sendMessageToGemini(
        [{ text: description, isUser: true }],
        undefined,
        systemPrompt,
        { temperature: 0.3, maxOutputTokens: 2048 }
      );

      // Nettoyer la r√©ponse pour extraire le JSON
      let jsonString = response.trim();
      
      // Supprimer le markdown si pr√©sent
      jsonString = jsonString.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      
      // Chercher le JSON dans la r√©ponse
      const jsonMatch = jsonString.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.error('R√©ponse Gemini:', response);
        throw new Error('R√©ponse JSON invalide de Gemini - Aucun JSON trouv√©');
      }

      let parsedConfig;
      try {
        parsedConfig = JSON.parse(jsonMatch[0]);
      } catch (parseError) {
        console.error('Erreur de parsing JSON:', parseError);
        console.error('JSON extrait:', jsonMatch[0]);
        throw new Error('R√©ponse JSON invalide de Gemini - Erreur de parsing');
      }
      
      // Valider et nettoyer les donn√©es avec valeurs par d√©faut intelligentes
      const validatedConfig: Partial<BoltPromptConfig> = {};
      
      template.variables.forEach((variable: BoltPromptVariable) => {
        const value = parsedConfig[variable.name];
        
        // Fonction pour obtenir une valeur par d√©faut intelligente
        const getDefaultValue = (varName: string, varType: string) => {
          switch (varName) {
            case 'projectType':
              return 'Application Web Moderne';
            case 'techStack':
              return ['React', 'TypeScript', 'Tailwind CSS'];
            case 'features':
              return ['Interface utilisateur', 'API REST', 'Base de donn√©es'];
            case 'targetAudience':
              return 'Utilisateurs finaux';
            case 'complexity':
              return 'intermediate';
            case 'timeline':
              return '2-4 semaines';
            case 'budget':
              return '1000-3000‚Ç¨';
            case 'constraints':
              return ['Responsive design', 'Performance optimis√©e'];
            case 'goals':
              return ['Am√©liorer la productivit√©', 'Automatiser les processus'];
            case 'inspiration':
              return 'Applications similaires sur le march√©';
            case 'additionalContext':
              return 'Focus sur l\'exp√©rience utilisateur moderne';
            default:
              return varType === 'boolean' ? false : 
                     varType === 'number' ? 0 : 
                     varType === 'multiselect' ? [] : '';
          }
        };

        // Validation et assignation avec fallback
        switch (variable.type) {
          case 'multiselect':
            if (Array.isArray(value) && value.length > 0) {
              (validatedConfig as Record<string, unknown>)[variable.name] = value;
            } else {
              (validatedConfig as Record<string, unknown>)[variable.name] = getDefaultValue(variable.name, variable.type);
            }
            break;
          case 'boolean':
            if (typeof value === 'boolean') {
              (validatedConfig as Record<string, unknown>)[variable.name] = value;
            } else {
              (validatedConfig as Record<string, unknown>)[variable.name] = getDefaultValue(variable.name, variable.type);
            }
            break;
          case 'number':
            if (typeof value === 'number' && value > 0) {
              (validatedConfig as Record<string, unknown>)[variable.name] = value;
            } else {
              (validatedConfig as Record<string, unknown>)[variable.name] = getDefaultValue(variable.name, variable.type);
            }
            break;
          case 'text':
          case 'select':
            if (typeof value === 'string' && value.trim().length > 0) {
              (validatedConfig as Record<string, unknown>)[variable.name] = value;
            } else {
              (validatedConfig as Record<string, unknown>)[variable.name] = getDefaultValue(variable.name, variable.type);
            }
            break;
        }
      });

      return validatedConfig;
    } catch (error) {
      console.error('Erreur lors de l\'auto-remplissage:', error);
      
      // Fallback : remplissage local basique si Gemini √©choue
      console.log('Tentative de remplissage local en fallback...');
      const fallbackConfig: Partial<BoltPromptConfig> = {};
      
      template.variables.forEach((variable: BoltPromptVariable) => {
        // Analyse basique de la description pour extraire des mots-cl√©s
        const descriptionLower = description.toLowerCase();
        
        switch (variable.name) {
          case 'projectType':
            if (descriptionLower.includes('web') || descriptionLower.includes('site')) {
              fallbackConfig.projectType = 'Application Web';
            } else if (descriptionLower.includes('mobile') || descriptionLower.includes('app')) {
              fallbackConfig.projectType = 'Application Mobile';
            } else if (descriptionLower.includes('api') || descriptionLower.includes('service')) {
              fallbackConfig.projectType = 'API REST';
            } else {
              fallbackConfig.projectType = 'Application Web Moderne';
            }
            break;
            
          case 'techStack': {
            const techs = [];
            if (descriptionLower.includes('react')) techs.push('React');
            if (descriptionLower.includes('vue')) techs.push('Vue.js');
            if (descriptionLower.includes('angular')) techs.push('Angular');
            if (descriptionLower.includes('typescript')) techs.push('TypeScript');
            if (descriptionLower.includes('javascript')) techs.push('JavaScript');
            if (descriptionLower.includes('tailwind')) techs.push('Tailwind CSS');
            if (descriptionLower.includes('node')) techs.push('Node.js');
            if (descriptionLower.includes('python')) techs.push('Python');
            if (descriptionLower.includes('java')) techs.push('Java');
            fallbackConfig.techStack = techs.length > 0 ? techs : ['React', 'TypeScript', 'Tailwind CSS'];
            break;
          }
            
          case 'complexity':
            if (descriptionLower.includes('simple') || descriptionLower.includes('basique')) {
              fallbackConfig.complexity = 'simple';
            } else if (descriptionLower.includes('avanc√©') || descriptionLower.includes('complexe') || descriptionLower.includes('expert')) {
              fallbackConfig.complexity = 'advanced';
            } else {
              fallbackConfig.complexity = 'intermediate';
            }
            break;
            
          case 'targetAudience':
            if (descriptionLower.includes('d√©veloppeur') || descriptionLower.includes('dev')) {
              fallbackConfig.targetAudience = 'D√©veloppeurs';
            } else if (descriptionLower.includes('entreprise') || descriptionLower.includes('business')) {
              fallbackConfig.targetAudience = 'Entreprises';
            } else {
              fallbackConfig.targetAudience = 'Utilisateurs finaux';
            }
            break;
            
          default:
            // Valeurs par d√©faut pour les autres champs
            if (variable.type === 'multiselect') {
              (fallbackConfig as Record<string, unknown>)[variable.name] = [];
            } else if (variable.type === 'boolean') {
              (fallbackConfig as Record<string, unknown>)[variable.name] = false;
            } else if (variable.type === 'number') {
              (fallbackConfig as Record<string, unknown>)[variable.name] = 0;
            } else {
              (fallbackConfig as Record<string, unknown>)[variable.name] = '';
            }
        }
      });
      
      return fallbackConfig;
    }
  }
}

// Instance singleton du service
export const boltPromptService = new BoltPromptService();
