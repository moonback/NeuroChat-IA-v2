/**
 * üîê Service de M√©moire S√©curis√©e - Protection AES-256
 * 
 * Couche de s√©curit√© pour le syst√®me de m√©moire utilisateur
 * - Chiffrement automatique en mode priv√©
 * - Gestion transparente des cl√©s de session
 * - Auto-destruction √† la fermeture
 * - Cache en m√©moire s√©curis√©
 */

import { encrypt, decrypt, generateSecurePassword, clearKeyCache, validateEncryptedBlob } from './encryption';
import type { MemoryItem } from './memory';

// ========================================================================================
// CONFIGURATION DE S√âCURIT√â
// ========================================================================================

/** Pr√©fixe pour identifier les donn√©es chiffr√©es */
const ENCRYPTED_PREFIX = 'NEUROCHT_ENC_';

/** Cl√© pour stocker le mot de passe de session */
const SESSION_KEY = 'nc_private_session_key';

/** Mode de s√©curit√© actuel */
let securityMode: 'private' | 'normal' = 'normal';

/** Mot de passe de session g√©n√©r√© automatiquement */
let sessionPassword: string | null = null;

/** Cache en m√©moire pour √©viter les d√©chiffrements r√©p√©t√©s */
const memoryCache = new Map<string, MemoryItem[]>();

// ========================================================================================
// GESTION DU MODE S√âCURIS√â
// ========================================================================================

/**
 * Active le mode priv√© s√©curis√©
 * G√©n√®re automatiquement un mot de passe de session unique
 */
export function enablePrivateMode(): void {
  if (securityMode === 'private') return;
  
  // G√©n√©ration d'un mot de passe de session cryptographiquement s√©curis√©
  sessionPassword = generateSecurePassword(64);
  securityMode = 'private';
  
  // Stocker le mot de passe de session en m√©moire volatile uniquement
  // (dispara√Æt √† la fermeture/actualisation de la page)
  sessionStorage.setItem(SESSION_KEY, sessionPassword);
  
  console.log('üîê Mode priv√© s√©curis√© activ√© - Protection AES-256 active');
}

/**
 * D√©sactive le mode priv√© et nettoie toutes les donn√©es sensibles
 */
export function disablePrivateMode(): void {
  if (securityMode === 'normal') return;
  
  // Nettoyage des donn√©es de session
  sessionPassword = null;
  securityMode = 'normal';
  
  // Effacement du sessionStorage
  sessionStorage.removeItem(SESSION_KEY);
  
  // Nettoyage du cache cryptographique
  clearKeyCache();
  memoryCache.clear();
  
  // Nettoyage des donn√©es chiffr√©es en localStorage
  clearEncryptedData();
  
  console.log('üîì Mode priv√© d√©sactiv√© - Donn√©es s√©curis√©es effac√©es');
}

/**
 * V√©rifie si le mode priv√© est actif
 */
export function isPrivateModeActive(): boolean {
  return securityMode === 'private' && sessionPassword !== null;
}

/**
 * R√©cup√®re le mot de passe de session (si mode priv√© actif)
 */
function getSessionPassword(): string {
  if (!isPrivateModeActive()) {
    throw new Error('Mode priv√© non actif - impossible d\'acc√©der aux donn√©es chiffr√©es');
  }
  
  // V√©rifier que le mot de passe est toujours en session
  const storedPassword = sessionStorage.getItem(SESSION_KEY);
  if (!storedPassword || storedPassword !== sessionPassword) {
    throw new Error('Session de s√©curit√© expir√©e - red√©marrage requis');
  }
  
  return sessionPassword!;
}

// ========================================================================================
// FONCTIONS DE STOCKAGE S√âCURIS√â
// ========================================================================================

/**
 * Sauvegarde s√©curis√©e de la m√©moire utilisateur
 * - Mode normal : stockage direct
 * - Mode priv√© : chiffrement AES-256
 */
export async function saveSecureMemory(workspaceId: string, memories: MemoryItem[]): Promise<void> {
  const key = `ws:${workspaceId}:neurochat_user_memory_v1`;
  
  try {
    if (securityMode === 'private') {
      // Mode priv√© : chiffrement des donn√©es
      const plaintext = JSON.stringify(memories);
      const password = getSessionPassword();
      
      const encryptedBlob = await encrypt(plaintext, password);
      const encryptedData = ENCRYPTED_PREFIX + JSON.stringify(encryptedBlob);
      
      // Stockage temporaire en sessionStorage (effac√© √† la fermeture)
      sessionStorage.setItem(key, encryptedData);
      
      // Mise √† jour du cache en m√©moire
      memoryCache.set(key, [...memories]);
      
      console.log(`üîê M√©moire chiffr√©e sauvegard√©e (${memories.length} √©l√©ments)`);
    } else {
      // Mode normal : stockage direct dans localStorage
      const compressed = memories.map(m => {
        const cleaned: any = {};
        for (const [k, value] of Object.entries(m)) {
          if (value !== undefined) cleaned[k] = value;
        }
        return cleaned;
      });
      
      localStorage.setItem(key, JSON.stringify(compressed));
      memoryCache.set(key, [...memories]);
    }
  } catch (error) {
    console.error('Erreur lors de la sauvegarde s√©curis√©e:', error);
    throw new Error(`√âchec de la sauvegarde s√©curis√©e: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

/**
 * Chargement s√©curis√© de la m√©moire utilisateur
 * - Mode normal : lecture directe
 * - Mode priv√© : d√©chiffrement AES-256
 */
export async function loadSecureMemory(workspaceId: string): Promise<MemoryItem[]> {
  const key = `ws:${workspaceId}:neurochat_user_memory_v1`;
  
  // V√©rifier le cache en m√©moire d'abord
  const cached = memoryCache.get(key);
  if (cached) {
    return [...cached];
  }
  
  try {
    let rawData: string | null = null;
    
    if (securityMode === 'private') {
      // Mode priv√© : r√©cup√©ration depuis sessionStorage
      rawData = sessionStorage.getItem(key);
    } else {
      // Mode normal : r√©cup√©ration depuis localStorage
      rawData = localStorage.getItem(key);
    }
    
    if (!rawData) {
      memoryCache.set(key, []);
      return [];
    }
    
    // V√©rifier si les donn√©es sont chiffr√©es
    if (rawData.startsWith(ENCRYPTED_PREFIX)) {
      // Donn√©es chiffr√©es : d√©chiffrement requis
      const encryptedDataStr = rawData.slice(ENCRYPTED_PREFIX.length);
      const encryptedBlob = JSON.parse(encryptedDataStr);
      
      if (!validateEncryptedBlob(encryptedBlob)) {
        throw new Error('Blob chiffr√© invalide - donn√©es corrompues');
      }
      
      const password = getSessionPassword();
      const decryptedData = await decrypt(encryptedBlob, password);
      const memories = JSON.parse(decryptedData);
      
      if (!Array.isArray(memories)) {
        throw new Error('Format de donn√©es invalide apr√®s d√©chiffrement');
      }
      
      memoryCache.set(key, memories);
      console.log(`üîì M√©moire d√©chiffr√©e charg√©e (${memories.length} √©l√©ments)`);
      return memories;
    } else {
      // Donn√©es non chiffr√©es : traitement normal
      const parsed = JSON.parse(rawData);
      if (!Array.isArray(parsed)) {
        memoryCache.set(key, []);
        return [];
      }
      
      memoryCache.set(key, parsed);
      return [...parsed];
    }
  } catch (error) {
    console.error('Erreur lors du chargement s√©curis√©:', error);
    
    // En cas d'erreur de d√©chiffrement, retourner un tableau vide
    if (error instanceof Error && error.message.includes('Mot de passe incorrect')) {
      console.warn('‚ö†Ô∏è Impossible de d√©chiffrer la m√©moire - session expir√©e ou donn√©es corrompues');
      memoryCache.set(key, []);
      return [];
    }
    
    throw new Error(`√âchec du chargement s√©curis√©: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

/**
 * Invalide le cache de m√©moire pour forcer le rechargement
 */
export function invalidateSecureMemoryCache(workspaceId: string): void {
  const key = `ws:${workspaceId}:neurochat_user_memory_v1`;
  memoryCache.delete(key);
}

/**
 * Efface toutes les donn√©es chiffr√©es du stockage local
 */
function clearEncryptedData(): void {
  // Nettoyer sessionStorage
  const sessionKeys = [];
  for (let i = 0; i < sessionStorage.length; i++) {
    const key = sessionStorage.key(i);
    if (key && (key.includes('neurochat_user_memory') || key.includes('gemini_'))) {
      sessionKeys.push(key);
    }
  }
  sessionKeys.forEach(key => sessionStorage.removeItem(key));
  
  // Nettoyer localStorage des donn√©es potentiellement chiffr√©es
  const localKeys = [];
  for (let i = 0; i < localStorage.length; i++) {
    const key = localStorage.key(i);
    if (key) {
      const value = localStorage.getItem(key);
      if (value && value.startsWith(ENCRYPTED_PREFIX)) {
        localKeys.push(key);
      }
    }
  }
  localKeys.forEach(key => localStorage.removeItem(key));
  
  console.log(`üßπ Nettoyage effectu√©: ${sessionKeys.length + localKeys.length} cl√©s supprim√©es`);
}

// ========================================================================================
// WRAPPER POUR L'API DE M√âMOIRE EXISTANTE
// ========================================================================================

/**
 * Interface unifi√©e pour le stockage de m√©moire (chiffr√© ou non selon le mode)
 */
export class SecureMemoryStore {
  constructor(private workspaceId: string) {}
  
  /**
   * Charge la m√©moire utilisateur (avec d√©chiffrement automatique si n√©cessaire)
   */
  async load(): Promise<MemoryItem[]> {
    return await loadSecureMemory(this.workspaceId);
  }
  
  /**
   * Sauvegarde la m√©moire utilisateur (avec chiffrement automatique si mode priv√©)
   */
  async save(memories: MemoryItem[]): Promise<void> {
    return await saveSecureMemory(this.workspaceId, memories);
  }
  
  /**
   * Invalide le cache pour forcer le rechargement
   */
  invalidateCache(): void {
    invalidateSecureMemoryCache(this.workspaceId);
  }
  
  /**
   * Obtient les statistiques de s√©curit√©
   */
  getSecurityInfo() {
    return {
      isPrivateMode: isPrivateModeActive(),
      cacheSize: memoryCache.size,
      workspaceId: this.workspaceId,
      hasSessionKey: sessionPassword !== null,
    };
  }
}

// ========================================================================================
// HOOKS DE CYCLE DE VIE
// ========================================================================================

/**
 * Initialise le syst√®me de m√©moire s√©curis√©e au d√©marrage
 * R√©cup√®re la session si elle existe
 */
export function initializeSecureMemory(): void {
  // V√©rifier s'il y a une session active
  const storedPassword = sessionStorage.getItem(SESSION_KEY);
  if (storedPassword) {
    sessionPassword = storedPassword;
    securityMode = 'private';
    console.log('üîê Session de s√©curit√© r√©cup√©r√©e - Mode priv√© actif');
  }
  
  // Nettoyer les sessions expir√©es au d√©marrage
  cleanupExpiredSessions();
}

/**
 * Nettoie les sessions expir√©es et les donn√©es orphelines
 */
function cleanupExpiredSessions(): void {
  try {
    // Nettoyer les donn√©es chiffr√©es orphelines (sans session active)
    if (!isPrivateModeActive()) {
      clearEncryptedData();
    }
  } catch (error) {
    console.warn('Erreur lors du nettoyage des sessions expir√©es:', error);
  }
}

/**
 * Gestionnaire d'√©v√©nement pour nettoyer √† la fermeture de la page
 */
if (typeof window !== 'undefined') {
  window.addEventListener('beforeunload', () => {
    if (isPrivateModeActive()) {
      console.log('üîê Fermeture d√©tect√©e - Auto-destruction des donn√©es priv√©es');
      disablePrivateMode();
    }
  });
  
  // Nettoyage p√©riodique du cache (toutes les 5 minutes)
  setInterval(() => {
    if (memoryCache.size > 10) {
      console.log('üßπ Nettoyage p√©riodique du cache m√©moire');
      memoryCache.clear();
    }
  }, 300000); // 5 minutes
}

// ========================================================================================
// EXPORT PAR D√âFAUT
// ========================================================================================

export default {
  enablePrivateMode,
  disablePrivateMode,
  isPrivateModeActive,
  SecureMemoryStore,
  initializeSecureMemory,
};
