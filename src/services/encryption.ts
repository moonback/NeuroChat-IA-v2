/**
 * üîê Service de Chiffrement AES-256 - Niveau Gouvernemental
 * 
 * Impl√©mentation de s√©curit√© militaire pour NeuroChat
 * - Chiffrement AES-256-GCM (Galois/Counter Mode) 
 * - D√©rivation de cl√© PBKDF2 avec 600,000 it√©rations
 * - Salt cryptographiquement s√©curis√© de 256 bits
 * - Vecteur d'initialisation (IV) unique par op√©ration
 * - Authentification int√©gr√©e (AEAD)
 * - Gestion s√©curis√©e des cl√©s en m√©moire
 */

// ========================================================================================
// CONFIGURATION DE S√âCURIT√â GOUVERNEMENTALE
// ========================================================================================

/** Param√®tres cryptographiques conformes aux standards gouvernementaux */
const CRYPTO_CONFIG = {
  // Algorithme de chiffrement (recommand√© par NIST/ANSSI)
  ALGORITHM: 'AES-GCM' as const,
  KEY_LENGTH: 256, // bits - AES-256
  IV_LENGTH: 96,   // bits - recommand√© pour GCM
  SALT_LENGTH: 256, // bits - haute entropie
  TAG_LENGTH: 128,  // bits - authentification
  
  // D√©rivation de cl√© (PBKDF2 - NIST SP 800-132)
  PBKDF2_ITERATIONS: 600000, // 600k it√©rations (OWASP 2023)
  PBKDF2_HASH: 'SHA-256' as const,
  
  // Encodage
  ENCODING: 'base64' as const,
} as const;

/** M√©tadonn√©es de version pour compatibility future */
const CRYPTO_VERSION = 'v1' as const;

// ========================================================================================
// INTERFACES ET TYPES
// ========================================================================================

/** Structure d'un blob chiffr√© avec toutes les m√©tadonn√©es n√©cessaires */
interface EncryptedBlob {
  version: typeof CRYPTO_VERSION;
  algorithm: typeof CRYPTO_CONFIG.ALGORITHM;
  data: string;        // Donn√©es chiffr√©es (base64)
  iv: string;          // Vecteur d'initialisation (base64)  
  salt: string;        // Sel pour d√©rivation de cl√© (base64)
  tag: string;         // Tag d'authentification (base64)
  iterations: number;  // Nombre d'it√©rations PBKDF2
  timestamp: number;   // Horodatage de chiffrement
}

/** Cl√© ma√Ætre d√©riv√©e en m√©moire (effac√©e automatiquement) */
interface DerivedKey {
  key: CryptoKey;
  salt: Uint8Array;
  createdAt: number;
  expiresAt: number;
}

// ========================================================================================
// GESTION S√âCURIS√âE DES CL√âS
// ========================================================================================

/** Cache s√©curis√© des cl√©s d√©riv√©es (auto-expiration) */
class SecureKeyCache {
  private cache = new Map<string, DerivedKey>();
  private readonly TTL = 300000; // 5 minutes en millisecondes
  
  /** Stocke une cl√© d√©riv√©e avec expiration automatique */
  store(keyId: string, key: CryptoKey): void {
    const now = Date.now();
    
    this.cache.set(keyId, {
      key,
      salt: new Uint8Array(), // Pas utilis√© dans la nouvelle impl√©mentation
      createdAt: now,
      expiresAt: now + this.TTL
    });
    
    // Nettoyer les cl√©s expir√©es
    this.cleanup();
  }
  
  /** R√©cup√®re une cl√© d√©riv√©e si elle n'est pas expir√©e */
  get(keyId: string): CryptoKey | null {
    const entry = this.cache.get(keyId);
    
    if (!entry || Date.now() > entry.expiresAt) {
      if (entry) this.cache.delete(keyId);
      return null;
    }
    
    return entry.key;
  }
  
  /** Nettoie les cl√©s expir√©es du cache */
  private cleanup(): void {
    const now = Date.now();
    for (const [id, entry] of this.cache.entries()) {
      if (now > entry.expiresAt) {
        this.cache.delete(id);
      }
    }
  }
  
  /** Vide compl√®tement le cache (pour logout/mode priv√© d√©sactiv√©) */
  clear(): void {
    this.cache.clear();
  }
}

/** Instance singleton du cache s√©curis√© */
const keyCache = new SecureKeyCache();

// ========================================================================================
// FONCTIONS CRYPTOGRAPHIQUES PRINCIPALES
// ========================================================================================

/**
 * G√©n√®re un sel cryptographiquement s√©curis√©
 * @returns Sel al√©atoire de 256 bits
 */
function generateSalt(): Uint8Array {
  return crypto.getRandomValues(new Uint8Array(CRYPTO_CONFIG.SALT_LENGTH / 8));
}

/**
 * G√©n√®re un vecteur d'initialisation cryptographiquement s√©curis√©
 * @returns IV al√©atoire de 96 bits (optimis√© pour GCM)
 */
function generateIV(): Uint8Array {
  return crypto.getRandomValues(new Uint8Array(CRYPTO_CONFIG.IV_LENGTH / 8));
}

/**
 * D√©rive une cl√© cryptographique √† partir d'un mot de passe
 * Utilise PBKDF2 avec 600,000 it√©rations (r√©sistant aux attaques par force brute)
 * 
 * @param password - Mot de passe utilisateur
 * @param salt - Sel cryptographique unique
 * @returns Cl√© AES-256 d√©riv√©e
 */
async function deriveKey(password: string, salt: Uint8Array): Promise<CryptoKey> {
  // Cr√©er une cl√© de cache s√©curis√©e qui inclut le mot de passe ET le salt
  // Utiliser un hash pour √©viter de stocker le mot de passe en clair
  const saltHex = Array.from(salt, b => b.toString(16).padStart(2, '0')).join('');
  const passwordHash = Array.from(new TextEncoder().encode(password), b => b.toString(16).padStart(2, '0')).join('').slice(0, 16);
  const cacheKey = passwordHash + '::' + saltHex;
  const cachedKey = keyCache.get(cacheKey);
  if (cachedKey) {
    return cachedKey;
  }
  
  try {
    // Convertir le mot de passe en mat√©riau de cl√©
    const passwordBuffer = new TextEncoder().encode(password);
    const keyMaterial = await crypto.subtle.importKey(
      'raw',
      passwordBuffer,
      'PBKDF2',
      false,
      ['deriveKey']
    );
    
    // D√©river la cl√© avec PBKDF2
    const derivedKey = await crypto.subtle.deriveKey(
      {
        name: 'PBKDF2',
        salt: salt,
        iterations: CRYPTO_CONFIG.PBKDF2_ITERATIONS,
        hash: CRYPTO_CONFIG.PBKDF2_HASH,
      },
      keyMaterial,
      {
        name: CRYPTO_CONFIG.ALGORITHM,
        length: CRYPTO_CONFIG.KEY_LENGTH,
      },
      false, // Non extractible pour s√©curit√©
      ['encrypt', 'decrypt']
    );
    
    // Mettre en cache pour √©viter les recalculs co√ªteux
    keyCache.store(cacheKey, derivedKey);
    
    return derivedKey;
  } catch (error) {
    throw new Error(`√âchec de d√©rivation de cl√©: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

/**
 * Chiffre des donn√©es avec AES-256-GCM
 * Niveau de s√©curit√© gouvernemental avec authentification int√©gr√©e
 * 
 * @param plaintext - Donn√©es √† chiffrer (string)
 * @param password - Mot de passe de chiffrement
 * @returns Blob chiffr√© avec toutes les m√©tadonn√©es
 */
export async function encrypt(plaintext: string, password: string): Promise<EncryptedBlob> {
  // Validation des entr√©es
  if (!plaintext || typeof plaintext !== 'string') {
    throw new Error('Les donn√©es √† chiffrer doivent √™tre une cha√Æne non vide');
  }
  if (!password || typeof password !== 'string' || password.length < 8) {
    throw new Error('Le mot de passe doit contenir au moins 8 caract√®res');
  }
  
  try {
    // G√©n√©ration des param√®tres cryptographiques s√©curis√©s
    const salt = generateSalt();
    const iv = generateIV();
    const timestamp = Date.now();
    
    // D√©rivation de la cl√© ma√Ætre
    const key = await deriveKey(password, salt);
    
    // Chiffrement des donn√©es
    const plainBuffer = new TextEncoder().encode(plaintext);
    const encryptedBuffer = await crypto.subtle.encrypt(
      {
        name: CRYPTO_CONFIG.ALGORITHM,
        iv: iv,
        tagLength: CRYPTO_CONFIG.TAG_LENGTH,
      },
      key,
      plainBuffer
    );
    
    // Extraction du tag d'authentification (derniers 16 bytes pour GCM)
    const tagLength = CRYPTO_CONFIG.TAG_LENGTH / 8;
    const dataWithoutTag = encryptedBuffer.slice(0, -tagLength);
    const tag = encryptedBuffer.slice(-tagLength);
    
    // Encodage en base64 pour stockage
    return {
      version: CRYPTO_VERSION,
      algorithm: CRYPTO_CONFIG.ALGORITHM,
      data: btoa(String.fromCharCode(...new Uint8Array(dataWithoutTag))),
      iv: btoa(String.fromCharCode(...iv)),
      salt: btoa(String.fromCharCode(...salt)),
      tag: btoa(String.fromCharCode(...new Uint8Array(tag))),
      iterations: CRYPTO_CONFIG.PBKDF2_ITERATIONS,
      timestamp,
    };
  } catch (error) {
    throw new Error(`√âchec du chiffrement: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

/**
 * D√©chiffre des donn√©es AES-256-GCM avec v√©rification d'int√©grit√©
 * 
 * @param encryptedBlob - Blob chiffr√© avec m√©tadonn√©es
 * @param password - Mot de passe de d√©chiffrement
 * @returns Donn√©es d√©chiffr√©es en texte clair
 */
export async function decrypt(encryptedBlob: EncryptedBlob, password: string): Promise<string> {
  // Validation du blob
  if (!encryptedBlob || typeof encryptedBlob !== 'object') {
    throw new Error('Blob chiffr√© invalide');
  }
  
  const requiredFields = ['version', 'algorithm', 'data', 'iv', 'salt', 'tag', 'iterations', 'timestamp'];
  for (const field of requiredFields) {
    if (!(field in encryptedBlob)) {
      throw new Error(`Champ manquant dans le blob chiffr√©: ${field}`);
    }
  }
  
  // V√©rification de version
  if (encryptedBlob.version !== CRYPTO_VERSION) {
    throw new Error(`Version non support√©e: ${encryptedBlob.version}`);
  }
  
  // V√©rification de l'algorithme
  if (encryptedBlob.algorithm !== CRYPTO_CONFIG.ALGORITHM) {
    throw new Error(`Algorithme non support√©: ${encryptedBlob.algorithm}`);
  }
  
  if (!password || typeof password !== 'string') {
    throw new Error('Mot de passe requis pour le d√©chiffrement');
  }
  
  try {
    // D√©codage des param√®tres cryptographiques
    const salt = new Uint8Array(atob(encryptedBlob.salt).split('').map(c => c.charCodeAt(0)));
    const iv = new Uint8Array(atob(encryptedBlob.iv).split('').map(c => c.charCodeAt(0)));
    const data = new Uint8Array(atob(encryptedBlob.data).split('').map(c => c.charCodeAt(0)));
    const tag = new Uint8Array(atob(encryptedBlob.tag).split('').map(c => c.charCodeAt(0)));
    
    // Validation des tailles
    if (salt.length !== CRYPTO_CONFIG.SALT_LENGTH / 8) {
      throw new Error('Taille de sel invalide');
    }
    if (iv.length !== CRYPTO_CONFIG.IV_LENGTH / 8) {
      throw new Error('Taille d\'IV invalide');
    }
    if (tag.length !== CRYPTO_CONFIG.TAG_LENGTH / 8) {
      throw new Error('Taille de tag invalide');
    }
    
    // Reconstruction du buffer chiffr√© (donn√©es + tag)
    const encryptedBuffer = new Uint8Array(data.length + tag.length);
    encryptedBuffer.set(data);
    encryptedBuffer.set(tag, data.length);
    
    // D√©rivation de la cl√©
    const key = await deriveKey(password, salt);
    
    // D√©chiffrement avec v√©rification d'authenticit√©
    // En AES-GCM, le tag doit √™tre √† la fin des donn√©es
    const decryptedBuffer = await crypto.subtle.decrypt(
      {
        name: CRYPTO_CONFIG.ALGORITHM,
        iv: iv,
        tagLength: CRYPTO_CONFIG.TAG_LENGTH,
      },
      key,
      encryptedBuffer  // data + tag d√©j√† concat√©n√©s
    );
    
    // Conversion en texte
    return new TextDecoder().decode(decryptedBuffer);
  } catch (error) {
    // Les erreurs de d√©chiffrement WebCrypto indiquent g√©n√©ralement un mot de passe incorrect
    if (error instanceof DOMException || 
        (error instanceof Error && (
          error.message.includes('decrypt') ||
          error.message.includes('Invalid') ||
          error.message.includes('invalid') ||
          error.message.includes('failed') ||
          error.message.includes('tag') ||
          error.name === 'OperationError'
        ))) {
      throw new Error('Mot de passe incorrect ou donn√©es corrompues');
    }
    throw new Error(`√âchec du d√©chiffrement: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
  }
}

// ========================================================================================
// FONCTIONS UTILITAIRES DE S√âCURIT√â
// ========================================================================================

/**
 * Valide l'int√©grit√© d'un blob chiffr√© sans le d√©chiffrer
 * @param encryptedBlob - Blob √† valider
 * @returns true si le blob semble valide
 */
export function validateEncryptedBlob(encryptedBlob: unknown): encryptedBlob is EncryptedBlob {
  if (!encryptedBlob || typeof encryptedBlob !== 'object') return false;
  
  const requiredFields = ['version', 'algorithm', 'data', 'iv', 'salt', 'tag', 'iterations', 'timestamp'];
  return requiredFields.every(field => field in encryptedBlob);
}

/**
 * G√©n√®re un mot de passe s√©curis√© pour les sessions temporaires
 * @param length - Longueur du mot de passe (d√©faut: 32)
 * @returns Mot de passe cryptographiquement s√©curis√©
 */
export function generateSecurePassword(length: number = 32): string {
  const charset = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
  const array = new Uint8Array(length);
  crypto.getRandomValues(array);
  
  return Array.from(array, byte => charset[byte % charset.length]).join('');
}

/**
 * Calcule l'empreinte SHA-256 d'un blob chiffr√© pour v√©rification d'int√©grit√©
 * @param encryptedBlob - Blob chiffr√©
 * @returns Empreinte hexad√©cimale
 */
export async function calculateBlobFingerprint(encryptedBlob: EncryptedBlob): Promise<string> {
  const data = JSON.stringify(encryptedBlob);
  const buffer = new TextEncoder().encode(data);
  const hashBuffer = await crypto.subtle.digest('SHA-256', buffer);
  
  return Array.from(new Uint8Array(hashBuffer), b => b.toString(16).padStart(2, '0')).join('');
}

/**
 * Nettoie le cache des cl√©s (√† appeler lors de la d√©connexion/d√©sactivation du mode priv√©)
 */
export function clearKeyCache(): void {
  keyCache.clear();
  
  // Force le garbage collector pour les donn√©es sensibles (si support√©)
  if ('gc' in window && typeof window.gc === 'function') {
    window.gc();
  }
}

/**
 * Obtient des statistiques sur le syst√®me de chiffrement
 * @returns Informations de diagnostic
 */
export function getCryptoStats() {
  return {
    version: CRYPTO_VERSION,
    algorithm: CRYPTO_CONFIG.ALGORITHM,
    keyLength: CRYPTO_CONFIG.KEY_LENGTH,
    iterations: CRYPTO_CONFIG.PBKDF2_ITERATIONS,
    cacheSize: keyCache['cache'].size, // Acc√®s priv√© pour debug
    isWebCryptoSupported: 'crypto' in window && 'subtle' in crypto,
  };
}

// ========================================================================================
// TESTS D'AUTO-V√âRIFICATION
// ========================================================================================

/**
 * Effectue un test de chiffrement/d√©chiffrement pour v√©rifier le bon fonctionnement
 * @returns true si le test r√©ussit
 */
export async function selfTest(): Promise<boolean> {
  try {
    const testData = 'Test de chiffrement AES-256 - NeuroChat Security';
    const testPassword = 'TestPassword123!';
    
    console.log('üß™ Test crypto - Chiffrement avec mot de passe:', testPassword);
    
    // Test de chiffrement
    const encrypted = await encrypt(testData, testPassword);
    console.log('‚úÖ Chiffrement r√©ussi, structure:', {
      algorithm: encrypted.algorithm,
      version: encrypted.version,
      iterations: encrypted.iterations
    });
    
    // V√©rification de la structure
    if (!validateEncryptedBlob(encrypted)) {
      throw new Error('Structure de blob invalide');
    }
    
    // Test de d√©chiffrement
    const decrypted = await decrypt(encrypted, testPassword);
    console.log('‚úÖ D√©chiffrement r√©ussi avec bon mot de passe');
    
    // V√©rification de l'int√©grit√©
    if (decrypted !== testData) {
      throw new Error('Donn√©es corrompues apr√®s d√©chiffrement');
    }
    
    // Test avec mauvais mot de passe (doit √©chouer)
    console.log('üß™ Test crypto - Tentative d√©chiffrement avec mauvais mot de passe...');
    
    // Test critique: d√©chiffrement avec mauvais mot de passe
    console.log('üîë Donn√©es du blob √† tester:', {
      algorithm: encrypted.algorithm,
      saltLength: atob(encrypted.salt).length,
      ivLength: atob(encrypted.iv).length,
      dataLength: atob(encrypted.data).length,
      tagLength: atob(encrypted.tag).length
    });
    
    let wrongPasswordFailed = false;
    try {
      const wrongResult = await decrypt(encrypted, 'WrongPassword');
      // Si on arrive ici, le d√©chiffrement a r√©ussi avec un mauvais mot de passe (probl√®me!)
      console.error('üö® S√âCURIT√â COMPROMISE: D√©chiffrement r√©ussi avec mauvais mot de passe!');
      console.error('   R√©sultat obtenu:', wrongResult);
      console.error('   Donn√©es attendues:', testData);
      console.error('   Identiques?', wrongResult === testData);
      wrongPasswordFailed = false;
    } catch (error) {
      // Le d√©chiffrement a √©chou√© (attendu)
      wrongPasswordFailed = true;
      console.log('‚úÖ Test s√©curit√© r√©ussi: d√©chiffrement √©choue avec mauvais mot de passe');
      console.log('   Type d\'erreur:', error?.constructor?.name);
      console.log('   Message:', error instanceof Error ? error.message : String(error));
    }
    
    if (!wrongPasswordFailed) {
      throw new Error('S√âCURIT√â COMPROMISE: Le d√©chiffrement r√©ussit avec un mauvais mot de passe');
    }
    
    return true;
  } catch (error) {
    console.error('√âchec du test d\'auto-v√©rification:', error);
    return false;
  }
}
