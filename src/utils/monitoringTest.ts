// Utilitaires de test pour le syst√®me de monitoring
// Permet de valider le bon fonctionnement des m√©triques

import { 
  monitoringService, 
  recordSecurityEvent, 
  recordPerformanceEvent, 
  recordErrorEvent 
} from '@/services/monitoringService';

export interface TestResult {
  success: boolean;
  message: string;
  details?: any;
}

export class MonitoringTester {
  private results: TestResult[] = [];

  // Test de base du service de monitoring
  async testBasicFunctionality(): Promise<TestResult> {
    try {
      // D√©marrer le monitoring
      monitoringService.start();
      
      // Attendre un peu pour la collecte
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // V√©rifier que le service est actif
      const config = monitoringService.getConfig();
      if (!config.enableSecurityMonitoring || !config.enablePerformanceMonitoring) {
        return {
          success: false,
          message: 'Configuration de monitoring incorrecte',
          details: config
        };
      }

      // Arr√™ter le monitoring
      monitoringService.stop();

      return {
        success: true,
        message: 'Service de monitoring fonctionnel',
        details: config
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erreur lors du test de base',
        details: error
      };
    }
  }

  // Test de collecte des m√©triques de s√©curit√©
  async testSecurityMetrics(): Promise<TestResult> {
    try {
      // Enregistrer des √©v√©nements de test
      recordSecurityEvent({
        type: 'encryption',
        success: true,
        details: 'Test de chiffrement',
        duration: 5.2
      });

      recordSecurityEvent({
        type: 'decryption',
        success: true,
        details: 'Test de d√©chiffrement',
        duration: 3.1
      });

      recordSecurityEvent({
        type: 'integrity_check',
        success: true,
        details: 'Test de v√©rification d\'int√©grit√©'
      });

      // Attendre un peu pour la collecte
      await new Promise(resolve => setTimeout(resolve, 500));

      // V√©rifier les m√©triques
      const data = monitoringService.exportData();
      const securityMetrics = data.metrics.security;

      if (!securityMetrics || securityMetrics.totalEvents === 0) {
        return {
          success: false,
          message: 'Aucune m√©trique de s√©curit√© collect√©e',
          details: securityMetrics
        };
      }

      return {
        success: true,
        message: `M√©triques de s√©curit√© collect√©es: ${securityMetrics.totalEvents} √©v√©nements`,
        details: securityMetrics
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erreur lors du test des m√©triques de s√©curit√©',
        details: error
      };
    }
  }

  // Test de collecte des m√©triques de performance
  async testPerformanceMetrics(): Promise<TestResult> {
    try {
      // Enregistrer des √©v√©nements de test
      recordPerformanceEvent({
        type: 'memory_usage',
        value: 45.2,
        details: 'Test d\'utilisation m√©moire'
      });

      recordPerformanceEvent({
        type: 'cache_hit',
        value: 1,
        details: 'Test de cache hit'
      });

      recordPerformanceEvent({
        type: 'render',
        value: 12.5,
        details: 'Test de temps de rendu'
      });

      // Attendre un peu pour la collecte
      await new Promise(resolve => setTimeout(resolve, 500));

      // V√©rifier les m√©triques
      const data = monitoringService.exportData();
      const performanceMetrics = data.metrics.performance;

      if (!performanceMetrics || performanceMetrics.totalEvents === 0) {
        return {
          success: false,
          message: 'Aucune m√©trique de performance collect√©e',
          details: performanceMetrics
        };
      }

      return {
        success: true,
        message: `M√©triques de performance collect√©es: ${performanceMetrics.totalEvents} √©v√©nements`,
        details: performanceMetrics
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erreur lors du test des m√©triques de performance',
        details: error
      };
    }
  }

  // Test de gestion des erreurs
  async testErrorHandling(): Promise<TestResult> {
    try {
      // Enregistrer des erreurs de test
      recordErrorEvent({
        type: 'javascript',
        message: 'Test d\'erreur JavaScript',
        severity: 'low',
        context: { test: true }
      });

      recordErrorEvent({
        type: 'security',
        message: 'Test d\'erreur de s√©curit√©',
        severity: 'medium',
        context: { test: true }
      });

      // Attendre un peu pour la collecte
      await new Promise(resolve => setTimeout(resolve, 500));

      // V√©rifier les m√©triques
      const data = monitoringService.exportData();
      const errorMetrics = data.metrics.errors;

      if (!errorMetrics || errorMetrics.totalErrors === 0) {
        return {
          success: false,
          message: 'Aucune erreur enregistr√©e',
          details: errorMetrics
        };
      }

      return {
        success: true,
        message: `Erreurs enregistr√©es: ${errorMetrics.totalErrors} erreurs`,
        details: errorMetrics
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erreur lors du test de gestion des erreurs',
        details: error
      };
    }
  }

  // Test de stockage et persistance
  async testStoragePersistence(): Promise<TestResult> {
    try {
      // Enregistrer des donn√©es de test
      const testData = {
        timestamp: Date.now(),
        test: true,
        metrics: {
          security: { test: 'security' },
          performance: { test: 'performance' },
          errors: { test: 'errors' }
        }
      };

      // Simuler la sauvegarde
      monitoringService.start();
      await new Promise(resolve => setTimeout(resolve, 1000));
      monitoringService.stop();

      // V√©rifier que les donn√©es sont persist√©es
      const data = monitoringService.exportData();
      
      if (!data || !data.timestamp) {
        return {
          success: false,
          message: 'Donn√©es non persist√©es',
          details: data
        };
      }

      return {
        success: true,
        message: 'Donn√©es persist√©es correctement',
        details: {
          timestamp: data.timestamp,
          hasMetrics: !!data.metrics,
          hasHistory: !!data.history
        }
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erreur lors du test de persistance',
        details: error
      };
    }
  }

  // Test de g√©n√©ration d'alertes
  async testAlertGeneration(): Promise<TestResult> {
    try {
      // Simuler des conditions d'alerte
      recordPerformanceEvent({
        type: 'memory_usage',
        value: 95, // Au-dessus du seuil de 90%
        details: 'Test d\'alerte m√©moire √©lev√©e'
      });

      recordSecurityEvent({
        type: 'decryption',
        success: false,
        details: 'Test d\'alerte √©chec de d√©chiffrement'
      });

      // Attendre un peu pour la collecte
      await new Promise(resolve => setTimeout(resolve, 1000));

      // V√©rifier les m√©triques
      const data = monitoringService.exportData();
      const performanceMetrics = data.metrics.performance;
      const securityMetrics = data.metrics.security;

      const hasMemoryAlert = performanceMetrics.averageMemoryUsage > 90;
      const hasSecurityAlert = securityMetrics.failedDecryptions > 0;

      if (!hasMemoryAlert && !hasSecurityAlert) {
        return {
          success: false,
          message: 'Aucune alerte g√©n√©r√©e',
          details: { performanceMetrics, securityMetrics }
        };
      }

      return {
        success: true,
        message: 'Alertes g√©n√©r√©es correctement',
        details: {
          memoryAlert: hasMemoryAlert,
          securityAlert: hasSecurityAlert,
          performanceMetrics,
          securityMetrics
        }
      };
    } catch (error) {
      return {
        success: false,
        message: 'Erreur lors du test de g√©n√©ration d\'alertes',
        details: error
      };
    }
  }

  // Ex√©cuter tous les tests
  async runAllTests(): Promise<TestResult[]> {
    this.results = [];

    console.log('üß™ D√©marrage des tests de monitoring...');

    // Test 1: Fonctionnalit√© de base
    console.log('1Ô∏è‚É£ Test de fonctionnalit√© de base...');
    const basicTest = await this.testBasicFunctionality();
    this.results.push(basicTest);

    // Test 2: M√©triques de s√©curit√©
    console.log('2Ô∏è‚É£ Test des m√©triques de s√©curit√©...');
    const securityTest = await this.testSecurityMetrics();
    this.results.push(securityTest);

    // Test 3: M√©triques de performance
    console.log('3Ô∏è‚É£ Test des m√©triques de performance...');
    const performanceTest = await this.testPerformanceMetrics();
    this.results.push(performanceTest);

    // Test 4: Gestion des erreurs
    console.log('4Ô∏è‚É£ Test de gestion des erreurs...');
    const errorTest = await this.testErrorHandling();
    this.results.push(errorTest);

    // Test 5: Persistance
    console.log('5Ô∏è‚É£ Test de persistance...');
    const storageTest = await this.testStoragePersistence();
    this.results.push(storageTest);

    // Test 6: G√©n√©ration d'alertes
    console.log('6Ô∏è‚É£ Test de g√©n√©ration d\'alertes...');
    const alertTest = await this.testAlertGeneration();
    this.results.push(alertTest);

    // R√©sum√©
    const successCount = this.results.filter(r => r.success).length;
    const totalCount = this.results.length;

    console.log(`\nüìä R√©sultats des tests: ${successCount}/${totalCount} r√©ussis`);

    if (successCount === totalCount) {
      console.log('‚úÖ Tous les tests de monitoring ont r√©ussi !');
    } else {
      console.log('‚ùå Certains tests ont √©chou√©. V√©rifiez les d√©tails ci-dessus.');
    }

    return this.results;
  }

  // Obtenir les r√©sultats
  getResults(): TestResult[] {
    return this.results;
  }

  // Nettoyer les donn√©es de test
  cleanup(): void {
    monitoringService.clearHistory();
    console.log('üßπ Donn√©es de test nettoy√©es');
  }
}

// Fonction utilitaire pour ex√©cuter les tests
export async function runMonitoringTests(): Promise<TestResult[]> {
  const tester = new MonitoringTester();
  return await tester.runAllTests();
}

// Fonction pour tester depuis la console
export function testMonitoringFromConsole(): void {
  console.log('üîç Tests de monitoring disponibles:');
  console.log('- runMonitoringTests() : Ex√©cuter tous les tests');
  console.log('- new MonitoringTester().testBasicFunctionality() : Test de base');
  console.log('- new MonitoringTester().testSecurityMetrics() : Test s√©curit√©');
  console.log('- new MonitoringTester().testPerformanceMetrics() : Test performance');
  console.log('- new MonitoringTester().testErrorHandling() : Test erreurs');
  console.log('- new MonitoringTester().testStoragePersistence() : Test persistance');
  console.log('- new MonitoringTester().testAlertGeneration() : Test alertes');
  console.log('- new MonitoringTester().cleanup() : Nettoyer les donn√©es de test');
}

// Exposer les fonctions globalement pour les tests
if (typeof window !== 'undefined') {
  (window as any).runMonitoringTests = runMonitoringTests;
  (window as any).MonitoringTester = MonitoringTester;
  (window as any).testMonitoringFromConsole = testMonitoringFromConsole;
}
